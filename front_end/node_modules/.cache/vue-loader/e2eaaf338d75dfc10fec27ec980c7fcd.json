{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\essential_node.vue?vue&type=style&index=0&id=5bf73df8&scoped=true&lang=css","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\essential_node.vue","mtime":1734716362504},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\css-loader\\dist\\cjs.js","mtime":1733210773580},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1733210773701},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\postcss-loader\\src\\index.js","mtime":1733210773504},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouZXNzZW50aWFsX25vZGUgew0KICBwb3NpdGlvbjogYWJzb2x1dGU7DQogIHdpZHRoOiAxMDAlOw0KICBtYXJnaW4tbGVmdDogNXB4Ow0KICB0b3A6IDUwJTsNCiAgaGVpZ2h0OiA1MCU7DQogIGJhY2tncm91bmQtY29sb3I6ICNmZmY7DQp9DQoNCi5lc3NlbnRpYWxfbm9kZV90aXRsZSB7DQogIG1hcmdpbjogMTBweCAyMHB4Ow0KICBwYWRkaW5nOiA1cHg7DQogIGZvbnQtd2VpZ2h0OiA2MDA7DQogIGxldHRlci1zcGFjaW5nOiAxcHg7DQp9DQoNCi5lc3NlbnRpYWxfbm9kZV9jb250ZW50cyB7DQogIHdpZHRoOiAxMDAlOw0KICBoZWlnaHQ6IDkwJTsNCn0NCg=="},{"version":3,"sources":["essential_node.vue"],"names":[],"mappings":";AAqHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"essential_node.vue","sourceRoot":"src/components/blog_detail","sourcesContent":["<template>\r\n  <div class=\"essential_node\">\r\n    <div class=\"essential_node_title\">评论情感随时间变化</div>\r\n    <div class=\"essential_node_contents\">\r\n      <!-- ECharts图表容器 -->\r\n      <div id=\"sentiment-chart\" style=\"width: 100%; height: 100%;\"></div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n// 引入echarts\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n  name: \"sentiment_chart\",\r\n  data() {\r\n    return {\r\n      sentimentData: [], // 存储从后端获取的情感数据\r\n    };\r\n  },\r\n  methods: {\r\n  // 获取评论情感数据\r\n  getSentimentData() {\r\n    let query = this.$route.query;\r\n    this.$axios\r\n      .get(\r\n        `comment/sentiment/trend?tag_task_id=${query.tag_task_id}&weibo_id=${query.weibo_id}`\r\n      )\r\n      .then((res) => {\r\n        this.sentimentData = res.data.data; // 存储返回的情感数据\r\n        this.drawChart(); // 获取数据后绘制图表\r\n      });\r\n  },\r\n\r\n  // 绘制情感趋势图\r\n  drawChart() {\r\n    // 数据准备：按时间分类情感数据\r\n    let timeData = [];\r\n    let positiveData = [];\r\n    let negativeData = [];\r\n    let neutralData = [];\r\n\r\n    // 先将数据按时间排序\r\n    this.sentimentData.sort((a, b) => {\r\n      return new Date(a.publish_time) - new Date(b.publish_time); // 按时间升序排序\r\n    });\r\n\r\n    this.sentimentData.forEach((item) => {\r\n      timeData.push(item.publish_time); // 时间数据\r\n      positiveData.push(item.sentiment_counts.positive); // 正面情感数量\r\n      negativeData.push(item.sentiment_counts.negative); // 负面情感数量\r\n      neutralData.push(item.sentiment_counts.neutral); // 中立情感数量\r\n    });\r\n\r\n    // 初始化ECharts实例\r\n    let myChart = echarts.init(document.getElementById('sentiment-chart'));\r\n\r\n    // 图表配置\r\n    let option = {\r\n      tooltip: {\r\n        trigger: 'axis',\r\n      },\r\n      legend: {\r\n        data: ['积极', '消极', '中立'],\r\n        top: '10%',\r\n      },\r\n      xAxis: {\r\n        type: 'category',\r\n        data: timeData, // X轴为时间\r\n        axisLabel: {\r\n          rotate: 45, // 时间标签倾斜显示\r\n        },\r\n      },\r\n      yAxis: {\r\n        type: 'value',\r\n        name: '数量',\r\n      },\r\n      series: [\r\n        {\r\n          name: '积极',\r\n          type: 'line',\r\n          data: positiveData,\r\n          smooth: true, // 平滑曲线\r\n          color: 'green',\r\n          areaStyle: { color: 'rgba(0, 255, 0, 0.3)' }, // 填充区域颜色\r\n        },\r\n        {\r\n          name: '消极',\r\n          type: 'line',\r\n          data: negativeData,\r\n          smooth: true,\r\n          color: 'red',\r\n          areaStyle: { color: 'rgba(255, 0, 0, 0.3)' }, // 填充区域颜色\r\n        },\r\n        {\r\n          name: '中立',\r\n          type: 'line',\r\n          data: neutralData,\r\n          smooth: true,\r\n          color: 'gray',\r\n          areaStyle: { color: 'rgba(169, 169, 169, 0.3)' }, // 填充区域颜色\r\n        },\r\n      ],\r\n    };\r\n\r\n    // 使用刚指定的配置项和数据显示图表\r\n    myChart.setOption(option);\r\n  },\r\n},\r\n  mounted() {\r\n    this.getSentimentData(); // 组件加载时获取情感数据\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.essential_node {\r\n  position: absolute;\r\n  width: 100%;\r\n  margin-left: 5px;\r\n  top: 50%;\r\n  height: 50%;\r\n  background-color: #fff;\r\n}\r\n\r\n.essential_node_title {\r\n  margin: 10px 20px;\r\n  padding: 5px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n.essential_node_contents {\r\n  width: 100%;\r\n  height: 90%;\r\n}\r\n</style>\r\n"]}]}