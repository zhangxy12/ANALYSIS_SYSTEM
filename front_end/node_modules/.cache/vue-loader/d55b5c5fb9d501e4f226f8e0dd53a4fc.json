{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\propagate_tree.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\propagate_tree.vue","mtime":1734750344936},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQppbXBvcnQgZWNoYXJ0cyBmcm9tICdlY2hhcnRzJzsNCmltcG9ydCAnZWNoYXJ0cy9tYXAvanMvY2hpbmEnOyAvLyDlr7zlhaXkuK3lm73lnLDlm74NCg0KZXhwb3J0IGRlZmF1bHQgew0KICBuYW1lOiAicHJvcGFnYXRlX3RyZWUiLA0KICBkYXRhKCkgew0KICAgIHJldHVybiB7DQogICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSwNCiAgICB9Ow0KICB9LA0KICBtZXRob2RzOiB7DQogICAgLy8g5riy5p+T5Lyg5pKt5qCRDQogICAgbXlQcm9wYWdhdGVfdHJlZSgpIHsNCiAgICAgIGxldCBteUNoYXJ0ID0gdGhpcy4kZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcm9wYWdhdGVfdHJlZV9ncmFwaCIpKTsNCiAgICAgIGxldCBvcHRpb247DQogICAgICBsZXQgcXVlcnkgPSB0aGlzLiRyb3V0ZS5xdWVyeTsNCg0KICAgICAgbXlDaGFydC5zaG93TG9hZGluZygpOw0KICAgICAgdGhpcy4kYXhpb3MuZ2V0KGAvY29tbWVudC9sb2NhdGlvbj90YWdfdGFza19pZD0ke3F1ZXJ5LnRhZ190YXNrX2lkfSZ3ZWlib19pZD0ke3F1ZXJ5LndlaWJvX2lkfWApLnRoZW4oKHJlcykgPT4gew0KICAgICAgICBteUNoYXJ0LmhpZGVMb2FkaW5nKCk7DQoNCiAgICAgICAgY29uc3QgbG9jYXRpb25EYXRhID0gcmVzLmRhdGEuZGF0YTsgIC8vIOWBh+iuvui/lOWbnuaVsOaNrueahOe7k+aehOS4uiB7IGxvY2F0aW9uOiBbe25hbWU6ICflnLDngrkxJywgdmFsdWU6IDEwfSwgLi4uXSB9DQoNCiAgICAgICAgY29uc3QgZ2VvRGF0YSA9IGxvY2F0aW9uRGF0YS5tYXAoaXRlbSA9PiAoew0KICAgICAgICAgIG5hbWU6IGl0ZW0ubG9jYXRpb24sICAvLyDkvY3nva7lkI3np7ANCiAgICAgICAgICB2YWx1ZTogaXRlbS5jb3VudCwgICAgLy8g6K+l5L2N572u55qE6K+E6K665pWw6YePDQogICAgICAgIH0pKTsNCg0KICAgICAgICBteUNoYXJ0LnNldE9wdGlvbih7DQogICAgICAgICAgdG9vbHRpcDogew0KICAgICAgICAgICAgdHJpZ2dlcjogIml0ZW0iLA0KICAgICAgICAgIH0sDQogICAgICAgICAgZ2VvOiB7DQogICAgICAgICAgICBtYXA6ICJjaGluYSIsICAvLyDkvb/nlKjkuK3lm73lnLDlm74NCiAgICAgICAgICAgIGxhYmVsOiB7DQogICAgICAgICAgICAgIGVtcGhhc2lzOiB7DQogICAgICAgICAgICAgICAgc2hvdzogZmFsc2UsDQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgcm9hbTogdHJ1ZSwgIC8vIOWPr+S7peW5s+enu+WSjOe8qeaUvuWcsOWbvg0KICAgICAgICAgIH0sDQogICAgICAgICAgc2VyaWVzOiBbDQogICAgICAgICAgICB7DQogICAgICAgICAgICAgIG5hbWU6ICLlnLDnkIbkvY3nva7liIbluIMiLA0KICAgICAgICAgICAgICB0eXBlOiAic2NhdHRlciIsDQogICAgICAgICAgICAgIGNvb3JkaW5hdGVTeXN0ZW06ICJnZW8iLA0KICAgICAgICAgICAgICBkYXRhOiBnZW9EYXRhLA0KICAgICAgICAgICAgICBzeW1ib2xTaXplOiBmdW5jdGlvbiAodmFsKSB7DQogICAgICAgICAgICAgICAgcmV0dXJuIHZhbFsyXSAvIDI7ICAvLyDmoLnmja7or4TorrrmlbDph4/osIPmlbTmoIforrDnmoTlpKflsI8NCiAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgZW5jb2RlOiB7DQogICAgICAgICAgICAgICAgdmFsdWU6IDIsDQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgIGl0ZW1TdHlsZTogew0KICAgICAgICAgICAgICAgIGNvbG9yOiAiI0ZGNjM0NyIsICAvLyDorr7lrprngrnnmoTpopzoibINCiAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgXSwNCiAgICAgICAgfSk7DQogICAgICB9KTsNCiAgICB9LA0KDQogICAgLy8g5pi+56S65Zyw5Zu+DQogICAgc2hvdygpIHsNCiAgICAgIHRoaXMuZGlhbG9nVmlzaWJsZSA9IHRydWU7DQogICAgICB0aGlzLiRuZXh0VGljaygoKSA9PiB7DQogICAgICAgIGxldCBteUNoYXJ0ID0gdGhpcy4kZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBDaGFydCIpKTsNCiAgICAgICAgbGV0IG9wdGlvbjsNCg0KICAgICAgICBteUNoYXJ0LnNob3dMb2FkaW5nKCk7DQogICAgICAgIGxldCBxdWVyeSA9IHRoaXMuJHJvdXRlLnF1ZXJ5Ow0KICAgICAgICB0aGlzLiRheGlvcy5nZXQoYC9jb21tZW50L2xvY2F0aW9uP3RhZ190YXNrX2lkPSR7cXVlcnkudGFnX3Rhc2tfaWR9JndlaWJvX2lkPSR7cXVlcnkud2VpYm9faWR9YCkudGhlbigocmVzKSA9PiB7DQogICAgICAgICAgbXlDaGFydC5oaWRlTG9hZGluZygpOw0KDQogICAgICAgICAgY29uc3QgbG9jYXRpb25EYXRhID0gcmVzLmRhdGEuZGF0YTsgIC8vIOWBh+iuvui/lOWbnuaVsOaNrueahOe7k+aehOS4uiB7IGxvY2F0aW9uOiBbe25hbWU6ICflnLDngrkxJywgdmFsdWU6IDEwfSwgLi4uXSB9DQoNCiAgICAgICAgICBjb25zdCBnZW9EYXRhID0gbG9jYXRpb25EYXRhLm1hcChpdGVtID0+ICh7DQogICAgICAgICAgICBuYW1lOiBpdGVtLmxvY2F0aW9uLCAgLy8g5L2N572u5ZCN56ewDQogICAgICAgICAgICB2YWx1ZTogaXRlbS5jb3VudCwgICAgLy8g6K+l5L2N572u55qE6K+E6K665pWw6YePDQogICAgICAgICAgfSkpOw0KDQogICAgICAgICAgbXlDaGFydC5zZXRPcHRpb24oew0KICAgICAgICAgICAgdG9vbHRpcDogew0KICAgICAgICAgICAgICB0cmlnZ2VyOiAiaXRlbSIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgZ2VvOiB7DQogICAgICAgICAgICAgIG1hcDogImNoaW5hIiwgIC8vIOS9v+eUqOS4reWbveWcsOWbvg0KICAgICAgICAgICAgICBsYWJlbDogew0KICAgICAgICAgICAgICAgIGVtcGhhc2lzOiB7DQogICAgICAgICAgICAgICAgICBzaG93OiBmYWxzZSwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICByb2FtOiB0cnVlLCAgLy8g5Y+v5Lul5bmz56e75ZKM57yp5pS+5Zyw5Zu+DQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgc2VyaWVzOiBbDQogICAgICAgICAgICAgIHsNCiAgICAgICAgICAgICAgICBuYW1lOiAi5Zyw55CG5L2N572u5YiG5biDIiwNCiAgICAgICAgICAgICAgICB0eXBlOiAic2NhdHRlciIsDQogICAgICAgICAgICAgICAgY29vcmRpbmF0ZVN5c3RlbTogImdlbyIsDQogICAgICAgICAgICAgICAgZGF0YTogZ2VvRGF0YSwNCiAgICAgICAgICAgICAgICBzeW1ib2xTaXplOiBmdW5jdGlvbiAodmFsKSB7DQogICAgICAgICAgICAgICAgICByZXR1cm4gdmFsWzJdIC8gMjsgIC8vIOagueaNruivhOiuuuaVsOmHj+iwg+aVtOagh+iusOeahOWkp+Wwjw0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgICAgZW5jb2RlOiB7DQogICAgICAgICAgICAgICAgICB2YWx1ZTogMiwNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIGl0ZW1TdHlsZTogew0KICAgICAgICAgICAgICAgICAgY29sb3I6ICIjRkY2MzQ3IiwgIC8vIOiuvuWumueCueeahOminOiJsg0KICAgICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICBdLA0KICAgICAgICAgIH0pOw0KICAgICAgICB9KTsNCiAgICAgIH0pOw0KICAgIH0sDQogIH0sDQoNCiAgbW91bnRlZCgpIHsNCiAgICB0aGlzLm15UHJvcGFnYXRlX3RyZWUoKTsNCiAgfSwNCn07DQo="},{"version":3,"sources":["propagate_tree.vue"],"names":[],"mappings":";AAgfile":"propagate_tree.vue","sourceRoot":"src/components/blog_detail","sourcesContent":["<template>\r\n  <div class=\"propagate_tree\">\r\n    <div class=\"propagate_tree_title\">地理位置分布</div>\r\n    <el-button type=\"text\" @click=\"show\" class=\"maxTree\">点击打开地图</el-button>\r\n    <div id=\"propagate_tree_graph\"></div>\r\n    <el-dialog title=\"地理位置大图\" :visible.sync=\"dialogVisible\" fullscreen=\"true\">\r\n      <div id=\"mapChart\"></div>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"dialogVisible = false\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport echarts from 'echarts';\r\nimport 'echarts/map/js/china'; // 导入中国地图\r\n\r\nexport default {\r\n  name: \"propagate_tree\",\r\n  data() {\r\n    return {\r\n      dialogVisible: false,\r\n    };\r\n  },\r\n  methods: {\r\n    // 渲染传播树\r\n    myPropagate_tree() {\r\n      let myChart = this.$echarts.init(document.getElementById(\"propagate_tree_graph\"));\r\n      let option;\r\n      let query = this.$route.query;\r\n\r\n      myChart.showLoading();\r\n      this.$axios.get(`/comment/location?tag_task_id=${query.tag_task_id}&weibo_id=${query.weibo_id}`).then((res) => {\r\n        myChart.hideLoading();\r\n\r\n        const locationData = res.data.data;  // 假设返回数据的结构为 { location: [{name: '地点1', value: 10}, ...] }\r\n\r\n        const geoData = locationData.map(item => ({\r\n          name: item.location,  // 位置名称\r\n          value: item.count,    // 该位置的评论数量\r\n        }));\r\n\r\n        myChart.setOption({\r\n          tooltip: {\r\n            trigger: \"item\",\r\n          },\r\n          geo: {\r\n            map: \"china\",  // 使用中国地图\r\n            label: {\r\n              emphasis: {\r\n                show: false,\r\n              },\r\n            },\r\n            roam: true,  // 可以平移和缩放地图\r\n          },\r\n          series: [\r\n            {\r\n              name: \"地理位置分布\",\r\n              type: \"scatter\",\r\n              coordinateSystem: \"geo\",\r\n              data: geoData,\r\n              symbolSize: function (val) {\r\n                return val[2] / 2;  // 根据评论数量调整标记的大小\r\n              },\r\n              encode: {\r\n                value: 2,\r\n              },\r\n              itemStyle: {\r\n                color: \"#FF6347\",  // 设定点的颜色\r\n              },\r\n            },\r\n          ],\r\n        });\r\n      });\r\n    },\r\n\r\n    // 显示地图\r\n    show() {\r\n      this.dialogVisible = true;\r\n      this.$nextTick(() => {\r\n        let myChart = this.$echarts.init(document.getElementById(\"mapChart\"));\r\n        let option;\r\n\r\n        myChart.showLoading();\r\n        let query = this.$route.query;\r\n        this.$axios.get(`/comment/location?tag_task_id=${query.tag_task_id}&weibo_id=${query.weibo_id}`).then((res) => {\r\n          myChart.hideLoading();\r\n\r\n          const locationData = res.data.data;  // 假设返回数据的结构为 { location: [{name: '地点1', value: 10}, ...] }\r\n\r\n          const geoData = locationData.map(item => ({\r\n            name: item.location,  // 位置名称\r\n            value: item.count,    // 该位置的评论数量\r\n          }));\r\n\r\n          myChart.setOption({\r\n            tooltip: {\r\n              trigger: \"item\",\r\n            },\r\n            geo: {\r\n              map: \"china\",  // 使用中国地图\r\n              label: {\r\n                emphasis: {\r\n                  show: false,\r\n                },\r\n              },\r\n              roam: true,  // 可以平移和缩放地图\r\n            },\r\n            series: [\r\n              {\r\n                name: \"地理位置分布\",\r\n                type: \"scatter\",\r\n                coordinateSystem: \"geo\",\r\n                data: geoData,\r\n                symbolSize: function (val) {\r\n                  return val[2] / 2;  // 根据评论数量调整标记的大小\r\n                },\r\n                encode: {\r\n                  value: 2,\r\n                },\r\n                itemStyle: {\r\n                  color: \"#FF6347\",  // 设定点的颜色\r\n                },\r\n              },\r\n            ],\r\n          });\r\n        });\r\n      });\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.myPropagate_tree();\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.propagate_tree {\r\n  position: absolute;\r\n  top: 1%;\r\n  width: 100%;\r\n  height: 99%;\r\n  background-color: #fff;\r\n}\r\n.propagate_tree_title {\r\n  margin-left: 20px;\r\n  padding: 5px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n}\r\n#propagate_tree_graph {\r\n  width: 550px;\r\n  height: 750px;\r\n  top: 30px;\r\n  margin-left: 10%;\r\n}\r\n.maxTree {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n  z-index: 99;\r\n}\r\n#mapChart {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"]}]}