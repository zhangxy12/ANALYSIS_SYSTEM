{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\information_extraction.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\information_extraction.vue","mtime":1740884086085},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1733210776367},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpleHBvcnQgZGVmYXVsdCB7DQogIG5hbWU6ICJpbmZvcm1hdGlvbl9leHRyYWN0aW9uIiwNCiAgZGF0YSgpIHsNCiAgICByZXR1cm4gew0KICAgICAgdGltZXI6ICIiLA0KICAgICAgbXlDaGFydDogIiIsDQogICAgICBpbmZvcm1hdGlvbl9leHRyYWN0aW9uX2RhdGE6IHsNCiAgICAgICAgdHJpcGxlczogW10sIC8vIOWtmOWCqOaPkOWPlueahOS4ieWFg+e7hA0KICAgICAgfSwNCiAgICB9Ow0KICB9LA0KICBtZXRob2RzOiB7DQogICAgZ2V0SW5mb3JtYXRpb25FeHRyYWN0aW9uKCkgew0KICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy4kcm91dGUucXVlcnk7DQogICAgICB0aGlzLiRheGlvcw0KICAgICAgICAuZ2V0KA0KICAgICAgICAgICJjb21tZW50L2tub3dsZWRnZV9ncmFwaD90YWdfdGFza19pZD0iICsNCiAgICAgICAgICAgIHF1ZXJ5LnRhZ190YXNrX2lkICsNCiAgICAgICAgICAgICImd2VpYm9faWQ9IiArDQogICAgICAgICAgICBxdWVyeS53ZWlib19pZA0KICAgICAgICApDQogICAgICAgIC50aGVuKChyZXMpID0+IHsNCiAgICAgICAgICB0aGlzLmluZm9ybWF0aW9uX2V4dHJhY3Rpb25fZGF0YSA9IHJlcy5kYXRhLmRhdGE7DQogICAgICAgICAgY29uc29sZS5sb2cocmVzLmRhdGEuZGF0YSk7DQogICAgICAgICAgdGhpcy5teUluZm9ybWF0aW9uRXh0cmFjdGlvbigpOyAvLyDosIPnlKjnu5jlm77mlrnms5UNCiAgICAgICAgfSk7DQogICAgfSwNCg0KICAgIC8vIOe7mOWItuefpeivhuWbvuiwseWbvuihqA0KICAgIG15SW5mb3JtYXRpb25FeHRyYWN0aW9uKCkgew0KICAgICAgbGV0IG9wdGlvbjsNCg0KICAgICAgaWYgKHRoaXMubXlDaGFydCAhPSBudWxsICYmIHRoaXMubXlDaGFydCAhPT0gIiIgJiYgdGhpcy5teUNoYXJ0ICE9PSB1bmRlZmluZWQpIHsNCiAgICAgICAgdGhpcy5teUNoYXJ0LmRpc3Bvc2UoKTsgLy8g5riF55CG546w5pyJ55qE5Zu+6KGo5a6e5L6LDQogICAgICB9DQoNCiAgICAgIC8vIOWfuuS6juWHhuWkh+WlveeahGRvbe+8jOWIneWni+WMlmVjaGFydHPlrp7kvosNCiAgICAgIHRoaXMubXlDaGFydCA9IHRoaXMuJGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5mb3JtYXRpb25fZXh0cmFjdGlvbiIpKTsNCg0KICAgICAgLy8g6I635Y+W5LiJ5YWD57uE5pWw5o2uDQogICAgICBjb25zdCB0cmlwbGVzID0gdGhpcy5pbmZvcm1hdGlvbl9leHRyYWN0aW9uX2RhdGE7DQoNCiAgICAgIC8vIOeUqOS6juWtmOWCqOiKgueCueWSjOi+uQ0KICAgICAgY29uc3Qgbm9kZXMgPSBbXTsNCiAgICAgIGNvbnN0IGxpbmtzID0gW107DQogICAgICBjb25zdCBub2RlSWRzID0ge307IC8vIOeUqOS6juiusOW9leW3suWtmOWcqOeahOiKgueCuQ0KDQogICAgICAvLyDpgY3ljobkuInlhYPnu4TmlbDmja7lubblpITnkIbmr4/kuKrkuInlhYPnu4QNCiAgICAgIHRyaXBsZXMuZm9yRWFjaCgodHJpcGxlLCBpbmRleCkgPT4gew0KICAgICAgICAvLyDlpoLmnpxzdWJqZWN044CBcHJlZGljYXRl44CBb2JqZWN05piv5pWw57uE77yM5aSE55CG5q+P5Liq5YWD57SgDQogICAgICAgIGNvbnN0IHN1YmplY3RzID0gQXJyYXkuaXNBcnJheSh0cmlwbGUuc3ViamVjdCkgPyB0cmlwbGUuc3ViamVjdCA6IFt0cmlwbGUuc3ViamVjdF07DQogICAgICAgIGNvbnN0IHByZWRpY2F0ZXMgPSBBcnJheS5pc0FycmF5KHRyaXBsZS5wcmVkaWNhdGUpID8gdHJpcGxlLnByZWRpY2F0ZSA6IFt0cmlwbGUucHJlZGljYXRlXTsNCiAgICAgICAgY29uc3Qgb2JqZWN0cyA9IEFycmF5LmlzQXJyYXkodHJpcGxlLm9iamVjdCkgPyB0cmlwbGUub2JqZWN0IDogW3RyaXBsZS5vYmplY3RdOw0KDQogICAgICAgIHN1YmplY3RzLmZvckVhY2goc3ViamVjdCA9PiB7DQogICAgICAgICAgaWYgKCFub2RlSWRzW3N1YmplY3RdKSB7DQogICAgICAgICAgICBub2RlSWRzW3N1YmplY3RdID0gbm9kZXMubGVuZ3RoOw0KICAgICAgICAgICAgbm9kZXMucHVzaCh7DQogICAgICAgICAgICAgIGlkOiBzdWJqZWN0LA0KICAgICAgICAgICAgICBuYW1lOiBzdWJqZWN0LA0KICAgICAgICAgICAgICBjYXRlZ29yeTogMCwNCiAgICAgICAgICAgICAgbGFiZWw6IHsNCiAgICAgICAgICAgICAgICBzaG93OiB0cnVlLA0KICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiaW5zaWRlIiwNCiAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6ICJ7Yn0iLA0KICAgICAgICAgICAgICAgIGZvbnRTaXplOiAxNCwNCiAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmZmZmYnLA0KICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsNCiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5nZXRSYW5kb21Db2xvcigpLA0KICAgICAgICAgICAgICAgIG9wYWNpdHk6IDAuOSwNCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLA0KICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnI2ZmZmZmZicsDQogICAgICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDIsDQogICAgICAgICAgICAgIH0sDQogICAgICAgICAgICAgIHN5bWJvbFNpemU6IDUwLA0KICAgICAgICAgICAgfSk7DQogICAgICAgICAgfQ0KICAgICAgICB9KTsNCg0KICAgICAgICBvYmplY3RzLmZvckVhY2gob2JqZWN0ID0+IHsNCiAgICAgICAgICBpZiAoIW5vZGVJZHNbb2JqZWN0XSkgew0KICAgICAgICAgICAgbm9kZUlkc1tvYmplY3RdID0gbm9kZXMubGVuZ3RoOw0KICAgICAgICAgICAgbm9kZXMucHVzaCh7DQogICAgICAgICAgICAgIGlkOiBvYmplY3QsDQogICAgICAgICAgICAgIG5hbWU6IG9iamVjdCwNCiAgICAgICAgICAgICAgY2F0ZWdvcnk6IDIsDQogICAgICAgICAgICAgIGxhYmVsOiB7DQogICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwNCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogImluc2lkZSIsDQogICAgICAgICAgICAgICAgZm9ybWF0dGVyOiAie2J9IiwNCiAgICAgICAgICAgICAgICBmb250U2l6ZTogMTQsDQogICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJywNCiAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7DQogICAgICAgICAgICAgICAgY29sb3I6IHRoaXMuZ2V0UmFuZG9tQ29sb3IoKSwNCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjksDQogICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJywNCiAgICAgICAgICAgICAgICBib3JkZXJDb2xvcjogJyNmZmZmZmYnLA0KICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyLA0KICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICBzeW1ib2xTaXplOiA1MCwNCiAgICAgICAgICAgIH0pOw0KICAgICAgICAgIH0NCiAgICAgICAgfSk7DQoNCiAgICAgICAgLy8g5Yib5bu66L656L+e5o6lc3ViamVjdOWSjG9iamVjdO+8jOi+ueS4iuagh+azqHByZWRpY2F0ZQ0KICAgICAgICBzdWJqZWN0cy5mb3JFYWNoKHN1YmplY3QgPT4gew0KICAgICAgICAgIHByZWRpY2F0ZXMuZm9yRWFjaChwcmVkaWNhdGUgPT4gew0KICAgICAgICAgICAgb2JqZWN0cy5mb3JFYWNoKG9iamVjdCA9PiB7DQogICAgICAgICAgICAgIGxpbmtzLnB1c2goew0KICAgICAgICAgICAgICAgIHNvdXJjZTogc3ViamVjdCwNCiAgICAgICAgICAgICAgICB0YXJnZXQ6IG9iamVjdCwNCiAgICAgICAgICAgICAgICBsYWJlbDogew0KICAgICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwNCiAgICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogcHJlZGljYXRlLCAvLyDmmL7npLpwcmVkaWNhdGXkvZzkuLrovrnnmoRsYWJlbA0KICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDEyLA0KICAgICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJywNCiAgICAgICAgICAgICAgICB9LA0KICAgICAgICAgICAgICAgIGxpbmVTdHlsZTogew0KICAgICAgICAgICAgICAgICAgY29sb3I6ICIjYWFhIiwNCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLA0KICAgICAgICAgICAgICAgICAgY3VydmVuZXNzOiAwLjMsDQogICAgICAgICAgICAgICAgfSwNCiAgICAgICAgICAgICAgfSk7DQogICAgICAgICAgICB9KTsNCiAgICAgICAgICB9KTsNCiAgICAgICAgfSk7DQogICAgICB9KTsNCg0KICAgICAgLy8g5Zu+6KGo55qE6YWN572u6aG5DQogICAgICBvcHRpb24gPSB7DQogICAgICAgIHRvb2x0aXA6IHsNCiAgICAgICAgICBzaG93OiB0cnVlLA0KICAgICAgICB9LA0KICAgICAgICBhbmltYXRpb246IHRydWUsDQogICAgICAgIHNlcmllczogWw0KICAgICAgICAgIHsNCiAgICAgICAgICAgIHR5cGU6ICJncmFwaCIsDQogICAgICAgICAgICBsYXlvdXQ6ICJmb3JjZSIsDQogICAgICAgICAgICByb2FtOiB0cnVlLA0KICAgICAgICAgICAgc3ltYm9sU2l6ZTogNTAsDQogICAgICAgICAgICBsYWJlbDogew0KICAgICAgICAgICAgICBzaG93OiB0cnVlLA0KICAgICAgICAgICAgICBwb3NpdGlvbjogImluc2lkZSIsDQogICAgICAgICAgICAgIGZvcm1hdHRlcjogIntifSIsDQogICAgICAgICAgICAgIGZvbnRTaXplOiAxNCwNCiAgICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJywNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBlZGdlU3ltYm9sOiBbIm5vbmUiLCAiYXJyb3ciXSwNCiAgICAgICAgICAgIGVkZ2VTeW1ib2xTaXplOiBbNCwgMTBdLA0KICAgICAgICAgICAgZm9yY2U6IHsNCiAgICAgICAgICAgICAgcmVwdWxzaW9uOiAyMDAsDQogICAgICAgICAgICAgIGVkZ2VMZW5ndGg6IDE1MCwNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgICBkYXRhOiBub2RlcywNCiAgICAgICAgICAgIGxpbmtzOiBsaW5rcywNCiAgICAgICAgICAgIGNhdGVnb3JpZXM6IFsNCiAgICAgICAgICAgICAgeyBuYW1lOiAiRW50aXR5IiB9LA0KICAgICAgICAgICAgICB7IG5hbWU6ICJQcmVkaWNhdGUiIH0sDQogICAgICAgICAgICAgIHsgbmFtZTogIk9iamVjdCIgfSwNCiAgICAgICAgICAgIF0sDQogICAgICAgICAgICBlbXBoYXNpczogew0KICAgICAgICAgICAgICBmb2N1czogImFkamFjZW5jeSIsDQogICAgICAgICAgICB9LA0KICAgICAgICAgICAgbGluZVN0eWxlOiB7DQogICAgICAgICAgICAgIGNvbG9yOiAiI2FhYSIsDQogICAgICAgICAgICAgIHdpZHRoOiAxLA0KICAgICAgICAgICAgICBjdXJ2ZW5lc3M6IDAuMywNCiAgICAgICAgICAgIH0sDQogICAgICAgICAgfSwNCiAgICAgICAgXSwNCiAgICAgIH07DQoNCiAgICAgIHRoaXMubXlDaGFydC5zZXRPcHRpb24ob3B0aW9uKTsNCiAgICB9LA0KDQogICAgLy8g6ZqP5py66aKc6Imy55Sf5oiQ5Ye95pWw77yI5rWF6Imy57O777yJDQogICAgZ2V0UmFuZG9tQ29sb3IoKSB7DQogICAgICBjb25zdCBsZXR0ZXJzID0gJzg5QUJDREVGJzsNCiAgICAgIGxldCBjb2xvciA9ICcjJzsNCiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7DQogICAgICAgIGNvbG9yICs9IGxldHRlcnNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogNildOw0KICAgICAgfQ0KICAgICAgcmV0dXJuIGNvbG9yOw0KICAgIH0NCiAgfSwNCg0KICBtb3VudGVkKCkgew0KICAgIHRoaXMuZ2V0SW5mb3JtYXRpb25FeHRyYWN0aW9uKCk7DQogICAgdGhpcy50aW1lciA9IHNldEludGVydmFsKCgpID0+IHsNCiAgICAgIHRoaXMubXlJbmZvcm1hdGlvbkV4dHJhY3Rpb24oKTsgLy8g5q+PNeenkuabtOaWsOWbvuihqA0KICAgIH0sIDIwMDAwKTsgLy8g5a6a5pe25pu05paw5Zu+6KGoDQogIH0sDQoNCiAgYmVmb3JlRGVzdHJveSgpIHsNCiAgICBjbGVhckludGVydmFsKHRoaXMudGltZXIpOw0KICAgIHRoaXMudGltZXIgPSBudWxsOw0KICB9LA0KfTsNCg=="},{"version":3,"sources":["information_extraction.vue"],"names":[],"mappingsfile":"information_extraction.vue","sourceRoot":"src/components/blog_detail","sourcesContent":["<template>\r\n  <div class=\"information_extraction\">\r\n    <div class=\"information_extraction_title\">信息抽取</div>\r\n    <div id=\"information_extraction\" style=\"height: 80%;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"information_extraction\",\r\n  data() {\r\n    return {\r\n      timer: \"\",\r\n      myChart: \"\",\r\n      information_extraction_data: {\r\n        triples: [], // 存储提取的三元组\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    getInformationExtraction() {\r\n      let query = this.$route.query;\r\n      this.$axios\r\n        .get(\r\n          \"comment/knowledge_graph?tag_task_id=\" +\r\n            query.tag_task_id +\r\n            \"&weibo_id=\" +\r\n            query.weibo_id\r\n        )\r\n        .then((res) => {\r\n          this.information_extraction_data = res.data.data;\r\n          console.log(res.data.data);\r\n          this.myInformationExtraction(); // 调用绘图方法\r\n        });\r\n    },\r\n\r\n    // 绘制知识图谱图表\r\n    myInformationExtraction() {\r\n      let option;\r\n\r\n      if (this.myChart != null && this.myChart !== \"\" && this.myChart !== undefined) {\r\n        this.myChart.dispose(); // 清理现有的图表实例\r\n      }\r\n\r\n      // 基于准备好的dom，初始化echarts实例\r\n      this.myChart = this.$echarts.init(document.getElementById(\"information_extraction\"));\r\n\r\n      // 获取三元组数据\r\n      const triples = this.information_extraction_data;\r\n\r\n      // 用于存储节点和边\r\n      const nodes = [];\r\n      const links = [];\r\n      const nodeIds = {}; // 用于记录已存在的节点\r\n\r\n      // 遍历三元组数据并处理每个三元组\r\n      triples.forEach((triple, index) => {\r\n        // 如果subject、predicate、object是数组，处理每个元素\r\n        const subjects = Array.isArray(triple.subject) ? triple.subject : [triple.subject];\r\n        const predicates = Array.isArray(triple.predicate) ? triple.predicate : [triple.predicate];\r\n        const objects = Array.isArray(triple.object) ? triple.object : [triple.object];\r\n\r\n        subjects.forEach(subject => {\r\n          if (!nodeIds[subject]) {\r\n            nodeIds[subject] = nodes.length;\r\n            nodes.push({\r\n              id: subject,\r\n              name: subject,\r\n              category: 0,\r\n              label: {\r\n                show: true,\r\n                position: \"inside\",\r\n                formatter: \"{b}\",\r\n                fontSize: 14,\r\n                color: '#ffffff',\r\n              },\r\n              itemStyle: {\r\n                color: this.getRandomColor(),\r\n                opacity: 0.9,\r\n                borderRadius: '50%',\r\n                borderColor: '#ffffff',\r\n                borderWidth: 2,\r\n              },\r\n              symbolSize: 50,\r\n            });\r\n          }\r\n        });\r\n\r\n        objects.forEach(object => {\r\n          if (!nodeIds[object]) {\r\n            nodeIds[object] = nodes.length;\r\n            nodes.push({\r\n              id: object,\r\n              name: object,\r\n              category: 2,\r\n              label: {\r\n                show: true,\r\n                position: \"inside\",\r\n                formatter: \"{b}\",\r\n                fontSize: 14,\r\n                color: '#ffffff',\r\n              },\r\n              itemStyle: {\r\n                color: this.getRandomColor(),\r\n                opacity: 0.9,\r\n                borderRadius: '50%',\r\n                borderColor: '#ffffff',\r\n                borderWidth: 2,\r\n              },\r\n              symbolSize: 50,\r\n            });\r\n          }\r\n        });\r\n\r\n        // 创建边连接subject和object，边上标注predicate\r\n        subjects.forEach(subject => {\r\n          predicates.forEach(predicate => {\r\n            objects.forEach(object => {\r\n              links.push({\r\n                source: subject,\r\n                target: object,\r\n                label: {\r\n                  show: true,\r\n                  formatter: predicate, // 显示predicate作为边的label\r\n                  fontSize: 12,\r\n                  color: '#ffffff',\r\n                },\r\n                lineStyle: {\r\n                  color: \"#aaa\",\r\n                  width: 1,\r\n                  curveness: 0.3,\r\n                },\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      // 图表的配置项\r\n      option = {\r\n        tooltip: {\r\n          show: true,\r\n        },\r\n        animation: true,\r\n        series: [\r\n          {\r\n            type: \"graph\",\r\n            layout: \"force\",\r\n            roam: true,\r\n            symbolSize: 50,\r\n            label: {\r\n              show: true,\r\n              position: \"inside\",\r\n              formatter: \"{b}\",\r\n              fontSize: 14,\r\n              color: '#ffffff',\r\n            },\r\n            edgeSymbol: [\"none\", \"arrow\"],\r\n            edgeSymbolSize: [4, 10],\r\n            force: {\r\n              repulsion: 200,\r\n              edgeLength: 150,\r\n            },\r\n            data: nodes,\r\n            links: links,\r\n            categories: [\r\n              { name: \"Entity\" },\r\n              { name: \"Predicate\" },\r\n              { name: \"Object\" },\r\n            ],\r\n            emphasis: {\r\n              focus: \"adjacency\",\r\n            },\r\n            lineStyle: {\r\n              color: \"#aaa\",\r\n              width: 1,\r\n              curveness: 0.3,\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.myChart.setOption(option);\r\n    },\r\n\r\n    // 随机颜色生成函数（浅色系）\r\n    getRandomColor() {\r\n      const letters = '89ABCDEF';\r\n      let color = '#';\r\n      for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 6)];\r\n      }\r\n      return color;\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.getInformationExtraction();\r\n    this.timer = setInterval(() => {\r\n      this.myInformationExtraction(); // 每5秒更新图表\r\n    }, 20000); // 定时更新图表\r\n  },\r\n\r\n  beforeDestroy() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.information_extraction {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 5%;\r\n  background-color: #ffffff00;\r\n  color: #ffff;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\r\n  border: 2px solid #669ef3a5; /* 深色边框 */\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  backdrop-filter: blur(10px); /* 添加磨砂玻璃效果 */\r\n  -webkit-backdrop-filter: blur(10px); /* Safari 兼容 */\r\n  overflow: hidden;\r\n}\r\n\r\n.information_extraction_title {\r\n  margin: 10px 20px;\r\n  padding: 5px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n#information_extraction {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"]}]}