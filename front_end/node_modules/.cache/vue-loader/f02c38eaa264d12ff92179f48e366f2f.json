{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\information_extraction.vue?vue&type=style&index=0&id=310755ea&scoped=true&lang=css","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\information_extraction.vue","mtime":1740884086085},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\css-loader\\dist\\cjs.js","mtime":1733210773580},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\loaders\\stylePostLoader.js","mtime":1733210773701},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\postcss-loader\\src\\index.js","mtime":1733210773504},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQouaW5mb3JtYXRpb25fZXh0cmFjdGlvbiB7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCiAgdG9wOiA1JTsNCiAgYmFja2dyb3VuZC1jb2xvcjogI2ZmZmZmZjAwOw0KICBjb2xvcjogI2ZmZmY7DQogIGJveC1zaGFkb3c6IDAgNHB4IDEycHggcmdiYSgwLCAwLCAwLCAwLjEpOyAvKiDmt7vliqDpmLTlvbHmlYjmnpwgKi8NCiAgYm9yZGVyOiAycHggc29saWQgIzY2OWVmM2E1OyAvKiDmt7HoibLovrnmoYYgKi8NCiAgYm9yZGVyLXJhZGl1czogMTBweDsNCiAgYm94LXNpemluZzogYm9yZGVyLWJveDsNCiAgYmFja2Ryb3AtZmlsdGVyOiBibHVyKDEwcHgpOyAvKiDmt7vliqDno6jnoILnjrvnkoPmlYjmnpwgKi8NCiAgLXdlYmtpdC1iYWNrZHJvcC1maWx0ZXI6IGJsdXIoMTBweCk7IC8qIFNhZmFyaSDlhbzlrrkgKi8NCiAgb3ZlcmZsb3c6IGhpZGRlbjsNCn0NCg0KLmluZm9ybWF0aW9uX2V4dHJhY3Rpb25fdGl0bGUgew0KICBtYXJnaW46IDEwcHggMjBweDsNCiAgcGFkZGluZzogNXB4Ow0KICBmb250LXdlaWdodDogNjAwOw0KICBsZXR0ZXItc3BhY2luZzogMXB4Ow0KfQ0KDQojaW5mb3JtYXRpb25fZXh0cmFjdGlvbiB7DQogIHBvc2l0aW9uOiByZWxhdGl2ZTsNCiAgd2lkdGg6IDEwMCU7DQogIGhlaWdodDogMTAwJTsNCn0NCg=="},{"version":3,"sources":["information_extraction.vue"],"names":[],"mappings":";AAmNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"information_extraction.vue","sourceRoot":"src/components/blog_detail","sourcesContent":["<template>\r\n  <div class=\"information_extraction\">\r\n    <div class=\"information_extraction_title\">信息抽取</div>\r\n    <div id=\"information_extraction\" style=\"height: 80%;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"information_extraction\",\r\n  data() {\r\n    return {\r\n      timer: \"\",\r\n      myChart: \"\",\r\n      information_extraction_data: {\r\n        triples: [], // 存储提取的三元组\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    getInformationExtraction() {\r\n      let query = this.$route.query;\r\n      this.$axios\r\n        .get(\r\n          \"comment/knowledge_graph?tag_task_id=\" +\r\n            query.tag_task_id +\r\n            \"&weibo_id=\" +\r\n            query.weibo_id\r\n        )\r\n        .then((res) => {\r\n          this.information_extraction_data = res.data.data;\r\n          console.log(res.data.data);\r\n          this.myInformationExtraction(); // 调用绘图方法\r\n        });\r\n    },\r\n\r\n    // 绘制知识图谱图表\r\n    myInformationExtraction() {\r\n      let option;\r\n\r\n      if (this.myChart != null && this.myChart !== \"\" && this.myChart !== undefined) {\r\n        this.myChart.dispose(); // 清理现有的图表实例\r\n      }\r\n\r\n      // 基于准备好的dom，初始化echarts实例\r\n      this.myChart = this.$echarts.init(document.getElementById(\"information_extraction\"));\r\n\r\n      // 获取三元组数据\r\n      const triples = this.information_extraction_data;\r\n\r\n      // 用于存储节点和边\r\n      const nodes = [];\r\n      const links = [];\r\n      const nodeIds = {}; // 用于记录已存在的节点\r\n\r\n      // 遍历三元组数据并处理每个三元组\r\n      triples.forEach((triple, index) => {\r\n        // 如果subject、predicate、object是数组，处理每个元素\r\n        const subjects = Array.isArray(triple.subject) ? triple.subject : [triple.subject];\r\n        const predicates = Array.isArray(triple.predicate) ? triple.predicate : [triple.predicate];\r\n        const objects = Array.isArray(triple.object) ? triple.object : [triple.object];\r\n\r\n        subjects.forEach(subject => {\r\n          if (!nodeIds[subject]) {\r\n            nodeIds[subject] = nodes.length;\r\n            nodes.push({\r\n              id: subject,\r\n              name: subject,\r\n              category: 0,\r\n              label: {\r\n                show: true,\r\n                position: \"inside\",\r\n                formatter: \"{b}\",\r\n                fontSize: 14,\r\n                color: '#ffffff',\r\n              },\r\n              itemStyle: {\r\n                color: this.getRandomColor(),\r\n                opacity: 0.9,\r\n                borderRadius: '50%',\r\n                borderColor: '#ffffff',\r\n                borderWidth: 2,\r\n              },\r\n              symbolSize: 50,\r\n            });\r\n          }\r\n        });\r\n\r\n        objects.forEach(object => {\r\n          if (!nodeIds[object]) {\r\n            nodeIds[object] = nodes.length;\r\n            nodes.push({\r\n              id: object,\r\n              name: object,\r\n              category: 2,\r\n              label: {\r\n                show: true,\r\n                position: \"inside\",\r\n                formatter: \"{b}\",\r\n                fontSize: 14,\r\n                color: '#ffffff',\r\n              },\r\n              itemStyle: {\r\n                color: this.getRandomColor(),\r\n                opacity: 0.9,\r\n                borderRadius: '50%',\r\n                borderColor: '#ffffff',\r\n                borderWidth: 2,\r\n              },\r\n              symbolSize: 50,\r\n            });\r\n          }\r\n        });\r\n\r\n        // 创建边连接subject和object，边上标注predicate\r\n        subjects.forEach(subject => {\r\n          predicates.forEach(predicate => {\r\n            objects.forEach(object => {\r\n              links.push({\r\n                source: subject,\r\n                target: object,\r\n                label: {\r\n                  show: true,\r\n                  formatter: predicate, // 显示predicate作为边的label\r\n                  fontSize: 12,\r\n                  color: '#ffffff',\r\n                },\r\n                lineStyle: {\r\n                  color: \"#aaa\",\r\n                  width: 1,\r\n                  curveness: 0.3,\r\n                },\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      // 图表的配置项\r\n      option = {\r\n        tooltip: {\r\n          show: true,\r\n        },\r\n        animation: true,\r\n        series: [\r\n          {\r\n            type: \"graph\",\r\n            layout: \"force\",\r\n            roam: true,\r\n            symbolSize: 50,\r\n            label: {\r\n              show: true,\r\n              position: \"inside\",\r\n              formatter: \"{b}\",\r\n              fontSize: 14,\r\n              color: '#ffffff',\r\n            },\r\n            edgeSymbol: [\"none\", \"arrow\"],\r\n            edgeSymbolSize: [4, 10],\r\n            force: {\r\n              repulsion: 200,\r\n              edgeLength: 150,\r\n            },\r\n            data: nodes,\r\n            links: links,\r\n            categories: [\r\n              { name: \"Entity\" },\r\n              { name: \"Predicate\" },\r\n              { name: \"Object\" },\r\n            ],\r\n            emphasis: {\r\n              focus: \"adjacency\",\r\n            },\r\n            lineStyle: {\r\n              color: \"#aaa\",\r\n              width: 1,\r\n              curveness: 0.3,\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.myChart.setOption(option);\r\n    },\r\n\r\n    // 随机颜色生成函数（浅色系）\r\n    getRandomColor() {\r\n      const letters = '89ABCDEF';\r\n      let color = '#';\r\n      for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 6)];\r\n      }\r\n      return color;\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.getInformationExtraction();\r\n    this.timer = setInterval(() => {\r\n      this.myInformationExtraction(); // 每5秒更新图表\r\n    }, 20000); // 定时更新图表\r\n  },\r\n\r\n  beforeDestroy() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.information_extraction {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 5%;\r\n  background-color: #ffffff00;\r\n  color: #ffff;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\r\n  border: 2px solid #669ef3a5; /* 深色边框 */\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  backdrop-filter: blur(10px); /* 添加磨砂玻璃效果 */\r\n  -webkit-backdrop-filter: blur(10px); /* Safari 兼容 */\r\n  overflow: hidden;\r\n}\r\n\r\n.information_extraction_title {\r\n  margin: 10px 20px;\r\n  padding: 5px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n#information_extraction {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"]}]}