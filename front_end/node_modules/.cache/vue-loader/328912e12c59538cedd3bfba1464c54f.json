{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\mainscreen\\ip.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\mainscreen\\ip.vue","mtime":1742892877187},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpleHBvcnQgZGVmYXVsdCB7DQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGdyYXBoRGF0YTogW10sDQogICAgICBtYXBDb25maWc6IHsNCiAgICAgICAgYXVkaXRObzogJ0dTKDIwMjQpMDY1MOWPtycsDQogICAgICAgIHNvdXJjZTogJ+WbveWutuWcsOeQhuS/oeaBr+WFrOWFseacjeWKoeW5s+WPsCcNCiAgICAgIH0sDQogICAgICAvLyDnibnmrorooYzmlL/ljLrliJLmmKDlsITooajvvIjkuI3pnIDopoHliqAi55yBIueahOWcsOWMuu+8iQ0KICAgICAgc3BlY2lhbFJlZ2lvbnM6IHsNCiAgICAgICAgJ+WMl+S6rCc6ICfljJfkuqzluIInLA0KICAgICAgICAn5aSp5rSlJzogJ+Wkqea0peW4gicsDQogICAgICAgICfkuIrmtbcnOiAn5LiK5rW35biCJywNCiAgICAgICAgJ+mHjeW6hic6ICfph43luobluIInLA0KICAgICAgICAn5YaF6JKZ5Y+kJzogJ+WGheiSmeWPpOiHquayu+WMuicsDQogICAgICAgICflub/opb8nOiAn5bm/6KW/5aOu5peP6Ieq5rK75Yy6JywNCiAgICAgICAgJ+ilv+iXjyc6ICfopb/ol4/oh6rmsrvljLonLA0KICAgICAgICAn5a6B5aSPJzogJ+WugeWkj+WbnuaXj+iHquayu+WMuicsDQogICAgICAgICfmlrDnloYnOiAn5paw55aG57u05ZC+5bCU6Ieq5rK75Yy6JywNCiAgICAgICAgJ+mmmea4ryc6ICfpppnmuK/nibnliKvooYzmlL/ljLonLA0KICAgICAgICAn5r6z6ZeoJzogJ+a+s+mXqOeJueWIq+ihjOaUv+WMuicsDQogICAgICAgICflj7Dmub4nOiAn5Y+w5rm+55yBJw0KICAgICAgfQ0KICAgIH07DQogIH0sDQogIG1vdW50ZWQoKSB7DQogICAgdGhpcy5mZXRjaERhdGFBbmREcmF3TWFwKCk7DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICAvLyDop4TojIPljJblnLDljLrlkI3np7ANCiAgICBub3JtYWxpemVSZWdpb25OYW1lKG5hbWUpIHsNCiAgICAgIC8vIOWmguaenOW3sue7j+aYr+WujOaVtOWQjeensO+8iOW4puecgS/luIIv5Yy677yJ5YiZ55u05o6l6L+U5ZueDQogICAgICBpZiAobmFtZS5lbmRzV2l0aCgn55yBJykgfHwgbmFtZS5lbmRzV2l0aCgn5biCJykgfHwgbmFtZS5lbmRzV2l0aCgn6Ieq5rK75Yy6JykgfHwgbmFtZS5lbmRzV2l0aCgn54m55Yir6KGM5pS/5Yy6JykpIHsNCiAgICAgICAgcmV0dXJuIG5hbWU7DQogICAgICB9DQogICAgICANCiAgICAgIC8vIOajgOafpeeJueauiuihjOaUv+WMug0KICAgICAgaWYgKHRoaXMuc3BlY2lhbFJlZ2lvbnNbbmFtZV0pIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuc3BlY2lhbFJlZ2lvbnNbbmFtZV07DQogICAgICB9DQogICAgICANCiAgICAgIC8vIOaZrumAmuecgeS7veWKoOS4iiLnnIEi5ZCO57yADQogICAgICByZXR1cm4gbmFtZSArICfnnIEnOw0KICAgIH0sDQoNCiAgICBhc3luYyBmZXRjaERhdGFBbmREcmF3TWFwKCkgew0KICAgICAgdHJ5IHsNCiAgICAgICAgLy8gMS4g5Yqg6L29Y2hpbmEuZ2VvanNvbuaWh+S7tg0KICAgICAgICBjb25zdCBnZW9Kc29uUmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2dlb2pzb24vY2hpbmEuZ2VvanNvbicpOw0KICAgICAgICBpZiAoIWdlb0pzb25SZXNwb25zZS5vaykgdGhyb3cgbmV3IEVycm9yKCflnLDlm77mlofku7bliqDovb3lpLHotKUnKTsNCiAgICAgICAgY29uc3QgY2hpbmFHZW9KU09OID0gYXdhaXQgZ2VvSnNvblJlc3BvbnNlLmpzb24oKTsNCiAgICAgICAgdGhpcy4kZWNoYXJ0cy5yZWdpc3Rlck1hcCgnY2hpbmEnLCBjaGluYUdlb0pTT04pOw0KDQogICAgICAgIC8vIDIuIOiOt+WPluS4muWKoeaVsOaNruW5tuinhOiMg+WMluWcsOWMuuWQjeensA0KICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuJGF4aW9zLmdldCgnL21haW4vc3RhcnRfaXAnKTsNCiAgICAgICAgaWYgKHJlc3BvbnNlLmRhdGEuY29kZSA9PT0gMjAwKSB7DQogICAgICAgICAgY29uc3QgZ3JhcGhSZXNwb25zZSA9IGF3YWl0IHRoaXMuJGF4aW9zLmdldCgnL21haW4vYWxsX2lwJyk7DQogICAgICAgICAgLy8g5a+55pWw5o2u6L+b6KGM6IGa5ZCI77yI55u45ZCM5Zyw5Yy65ZCI5bm26K6h5pWw77yJDQogICAgICAgICAgY29uc3QgZGF0YU1hcCA9IHt9Ow0KICAgICAgICAgIGdyYXBoUmVzcG9uc2UuZGF0YS5kYXRhLmRldGFpbC5mb3JFYWNoKGl0ZW0gPT4gew0KICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZE5hbWUgPSB0aGlzLm5vcm1hbGl6ZVJlZ2lvbk5hbWUoaXRlbS5sb2NhdGlvbik7DQogICAgICAgICAgICBkYXRhTWFwW25vcm1hbGl6ZWROYW1lXSA9IChkYXRhTWFwW25vcm1hbGl6ZWROYW1lXSB8fCAwKSArIGl0ZW0uY291bnQ7DQogICAgICAgICAgfSk7DQogICAgICAgICAgDQogICAgICAgICAgLy8g6L2s5o2i5Li6ZWNoYXJ0c+mcgOimgeeahOagvOW8jw0KICAgICAgICAgIHRoaXMuZ3JhcGhEYXRhID0gT2JqZWN0LmtleXMoZGF0YU1hcCkubWFwKG5hbWUgPT4gKHsNCiAgICAgICAgICAgIG5hbWUsDQogICAgICAgICAgICB2YWx1ZTogZGF0YU1hcFtuYW1lXQ0KICAgICAgICAgIH0pKTsNCiAgICAgICAgICANCiAgICAgICAgICB0aGlzLmRyYXdNYXAoKTsNCiAgICAgICAgfQ0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsNCiAgICAgICAgY29uc29sZS5lcnJvcign5Yid5aeL5YyW5aSx6LSlOicsIGVycm9yKTsNCiAgICAgIH0NCiAgICB9LA0KDQogICAgZHJhd01hcCgpIHsNCiAgICAgIGNvbnN0IG15Q2hhcnQgPSB0aGlzLiRlY2hhcnRzLmluaXQoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQoJ21hcC1jaGFydCcpKTsNCiAgICAgIGNvbnN0IG1heENvdW50ID0gTWF0aC5tYXgoLi4udGhpcy5ncmFwaERhdGEubWFwKGl0ZW0gPT4gaXRlbS52YWx1ZSkpOw0KDQogICAgICBjb25zdCBvcHRpb24gPSB7DQogICAgICAgIHRpdGxlOiB7DQogICAgICAgICAgdGV4dDogJ+WcsOeQhuS9jee9ruWIhuW4gycsDQogICAgICAgICAgbGVmdDogJ2NlbnRlcicsDQogICAgICAgICAgdGV4dFN0eWxlOiB7DQogICAgICAgICAgICBjb2xvcjogJyNmZmZmZmYnLA0KICAgICAgICAgICAgZm9udFNpemU6IDE4LA0KICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnDQogICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICB0b29sdGlwOiB7DQogICAgICAgICAgdHJpZ2dlcjogJ2l0ZW0nLA0KICAgICAgICAgIGZvcm1hdHRlcjogJ3tifToge2N9IOS6uicsDQogICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjgpJywNCiAgICAgICAgICBib3JkZXJDb2xvcjogJyM0MGE5ZmYnLA0KICAgICAgICAgIHRleHRTdHlsZTogew0KICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJywNCiAgICAgICAgICAgIGZvbnRTaXplOiAxMg0KICAgICAgICAgIH0NCiAgICAgICAgfSwNCiAgICAgICAgdmlzdWFsTWFwOiB7DQogICAgICAgICAgbGVmdDogMjAsDQogICAgICAgICAgYm90dG9tOjIwLA0KICAgICAgICAgIG1pbjogMCwNCiAgICAgICAgICBtYXg6IG1heENvdW50LA0KICAgICAgICAgIGluUmFuZ2U6IHsNCiAgICAgICAgICAgIGNvbG9yOiBbJyM5ZWNhZTgnLCAnIzIxNzFiNScsICcjMDk2ZGQ5JywgJyMwODUxOWMnXQ0KICAgICAgICAgIH0sDQogICAgICAgICAgdGV4dFN0eWxlOiB7DQogICAgICAgICAgICBjb2xvcjogJyNmZmYnDQogICAgICAgICAgfSwNCiAgICAgICAgICBpdGVtV2lkdGg6IDEwLA0KICAgICAgICAgIGl0ZW1IZWlnaHQ6IDEwMCwNCiAgICAgICAgICBjYWxjdWxhYmxlOiB0cnVlDQogICAgICAgIH0sDQogICAgICAgIGdyYXBoaWM6IHsNCiAgICAgICAgICB0eXBlOiAndGV4dCcsDQogICAgICAgICAgbGVmdDogNTAsDQogICAgICAgICAgYm90dG9tOiAwLA0KICAgICAgICAgIHo6IDEwMCwNCiAgICAgICAgICBzdHlsZTogew0KICAgICAgICAgICAgdGV4dDogYOWuoeWbvuWPt++8miR7dGhpcy5tYXBDb25maWcuYXVkaXROb30g5p2l5rqQ77yaJHt0aGlzLm1hcENvbmZpZy5zb3VyY2V9YCwNCiAgICAgICAgICAgIGZvbnQ6ICcxMnB4IE1pY3Jvc29mdCBZYUhlaScsDQogICAgICAgICAgICBmaWxsOiAnI2ZmZicsDQogICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDApJywNCiAgICAgICAgICAgIHBhZGRpbmc6IFs2LCAxMF0sDQogICAgICAgICAgICBib3JkZXJSYWRpdXM6IDQNCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIHNlcmllczogW3sNCiAgICAgICAgICBuYW1lOiAn5YiG5biD5pWw5o2uJywNCiAgICAgICAgICB0eXBlOiAnbWFwJywNCiAgICAgICAgICBtYXA6ICdjaGluYScsDQogICAgICAgICAgcm9hbTogdHJ1ZSwNCiAgICAgICAgICBsYWJlbDogew0KICAgICAgICAgICAgc2hvdzogZmFsc2UsIC8vIOS4jeaYvuekuuecgeS7veaWh+Wtlw0KICAgICAgICAgICAgY29sb3I6ICcjMDAwJywNCiAgICAgICAgICAgIGZvbnRTaXplOiAxMA0KICAgICAgICAgIH0sDQogICAgICAgICAgaXRlbVN0eWxlOiB7DQogICAgICAgICAgICBib3JkZXJDb2xvcjogJyM0MGE5ZmYnLA0KICAgICAgICAgICAgYm9yZGVyV2lkdGg6IDEsDQogICAgICAgICAgICBhcmVhQ29sb3I6ICcjQjBDNERFJw0KICAgICAgICAgIH0sDQogICAgICAgICAgZW1waGFzaXM6IHsNCiAgICAgICAgICAgIGxhYmVsOiB7DQogICAgICAgICAgICAgIGNvbG9yOiAnI2ZmZicsDQogICAgICAgICAgICAgIGZvbnRTaXplOiAxMg0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIGl0ZW1TdHlsZTogew0KICAgICAgICAgICAgICBhcmVhQ29sb3I6ICcjNDBhOWZmJw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0sDQogICAgICAgICAgbGF5b3V0Q2VudGVyOiBbJzUwJScsICc1MCUnXSwgIC8vIOWcsOWbvuWxheS4reaYvuekug0KICAgICAgICAgIGxheW91dFNpemU6ICcxMDAlJywgIC8vIOWcsOWbvumAguW6lOeItue7hOS7tuWkp+Wwjw0KICAgICAgICAgIGRhdGE6IHRoaXMuZ3JhcGhEYXRhDQogICAgICAgIH1dDQogICAgICB9Ow0KDQogICAgICBteUNoYXJ0LnNldE9wdGlvbihvcHRpb24pOw0KDQogICAgICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4gbXlDaGFydC5yZXNpemUoKTsNCiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTsNCiAgICAgIHRoaXMuJG9uY2UoJ2hvb2s6YmVmb3JlRGVzdHJveScsICgpID0+IHsNCiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpOw0KICAgICAgICBteUNoYXJ0LmRpc3Bvc2UoKTsNCiAgICAgIH0pOw0KICAgIH0NCiAgfQ0KfTsNCg=="},{"version":3,"sources":["ip.vue"],"names":[],"mappingsfile":"ip.vue","sourceRoot":"src/components/mainscreen","sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"map-chart\" style=\"width: 100%; height: 400px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      graphData: [],\r\n      mapConfig: {\r\n        auditNo: 'GS(2024)0650号',\r\n        source: '国家地理信息公共服务平台'\r\n      },\r\n      // 特殊行政区划映射表（不需要加\"省\"的地区）\r\n      specialRegions: {\r\n        '北京': '北京市',\r\n        '天津': '天津市',\r\n        '上海': '上海市',\r\n        '重庆': '重庆市',\r\n        '内蒙古': '内蒙古自治区',\r\n        '广西': '广西壮族自治区',\r\n        '西藏': '西藏自治区',\r\n        '宁夏': '宁夏回族自治区',\r\n        '新疆': '新疆维吾尔自治区',\r\n        '香港': '香港特别行政区',\r\n        '澳门': '澳门特别行政区',\r\n        '台湾': '台湾省'\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchDataAndDrawMap();\r\n  },\r\n  methods: {\r\n    // 规范化地区名称\r\n    normalizeRegionName(name) {\r\n      // 如果已经是完整名称（带省/市/区）则直接返回\r\n      if (name.endsWith('省') || name.endsWith('市') || name.endsWith('自治区') || name.endsWith('特别行政区')) {\r\n        return name;\r\n      }\r\n      \r\n      // 检查特殊行政区\r\n      if (this.specialRegions[name]) {\r\n        return this.specialRegions[name];\r\n      }\r\n      \r\n      // 普通省份加上\"省\"后缀\r\n      return name + '省';\r\n    },\r\n\r\n    async fetchDataAndDrawMap() {\r\n      try {\r\n        // 1. 加载china.geojson文件\r\n        const geoJsonResponse = await fetch('/geojson/china.geojson');\r\n        if (!geoJsonResponse.ok) throw new Error('地图文件加载失败');\r\n        const chinaGeoJSON = await geoJsonResponse.json();\r\n        this.$echarts.registerMap('china', chinaGeoJSON);\r\n\r\n        // 2. 获取业务数据并规范化地区名称\r\n        const response = await this.$axios.get('/main/start_ip');\r\n        if (response.data.code === 200) {\r\n          const graphResponse = await this.$axios.get('/main/all_ip');\r\n          // 对数据进行聚合（相同地区合并计数）\r\n          const dataMap = {};\r\n          graphResponse.data.data.detail.forEach(item => {\r\n            const normalizedName = this.normalizeRegionName(item.location);\r\n            dataMap[normalizedName] = (dataMap[normalizedName] || 0) + item.count;\r\n          });\r\n          \r\n          // 转换为echarts需要的格式\r\n          this.graphData = Object.keys(dataMap).map(name => ({\r\n            name,\r\n            value: dataMap[name]\r\n          }));\r\n          \r\n          this.drawMap();\r\n        }\r\n      } catch (error) {\r\n        console.error('初始化失败:', error);\r\n      }\r\n    },\r\n\r\n    drawMap() {\r\n      const myChart = this.$echarts.init(document.getElementById('map-chart'));\r\n      const maxCount = Math.max(...this.graphData.map(item => item.value));\r\n\r\n      const option = {\r\n        title: {\r\n          text: '地理位置分布',\r\n          left: 'center',\r\n          textStyle: {\r\n            color: '#ffffff',\r\n            fontSize: 18,\r\n            fontWeight: 'bold'\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{b}: {c} 人',\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          borderColor: '#40a9ff',\r\n          textStyle: {\r\n            color: '#ffffff',\r\n            fontSize: 12\r\n          }\r\n        },\r\n        visualMap: {\r\n          left: 20,\r\n          bottom:20,\r\n          min: 0,\r\n          max: maxCount,\r\n          inRange: {\r\n            color: ['#9ecae8', '#2171b5', '#096dd9', '#08519c']\r\n          },\r\n          textStyle: {\r\n            color: '#fff'\r\n          },\r\n          itemWidth: 10,\r\n          itemHeight: 100,\r\n          calculable: true\r\n        },\r\n        graphic: {\r\n          type: 'text',\r\n          left: 50,\r\n          bottom: 0,\r\n          z: 100,\r\n          style: {\r\n            text: `审图号：${this.mapConfig.auditNo} 来源：${this.mapConfig.source}`,\r\n            font: '12px Microsoft YaHei',\r\n            fill: '#fff',\r\n            backgroundColor: 'rgba(0,0,0,0)',\r\n            padding: [6, 10],\r\n            borderRadius: 4\r\n          }\r\n        },\r\n        series: [{\r\n          name: '分布数据',\r\n          type: 'map',\r\n          map: 'china',\r\n          roam: true,\r\n          label: {\r\n            show: false, // 不显示省份文字\r\n            color: '#000',\r\n            fontSize: 10\r\n          },\r\n          itemStyle: {\r\n            borderColor: '#40a9ff',\r\n            borderWidth: 1,\r\n            areaColor: '#B0C4DE'\r\n          },\r\n          emphasis: {\r\n            label: {\r\n              color: '#fff',\r\n              fontSize: 12\r\n            },\r\n            itemStyle: {\r\n              areaColor: '#40a9ff'\r\n            }\r\n          },\r\n          layoutCenter: ['50%', '50%'],  // 地图居中显示\r\n          layoutSize: '100%',  // 地图适应父组件大小\r\n          data: this.graphData\r\n        }]\r\n      };\r\n\r\n      myChart.setOption(option);\r\n\r\n      const resizeHandler = () => myChart.resize();\r\n      window.addEventListener('resize', resizeHandler);\r\n      this.$once('hook:beforeDestroy', () => {\r\n        window.removeEventListener('resize', resizeHandler);\r\n        myChart.dispose();\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map-chart {\r\n  background: #1e1e2f;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);\r\n}\r\n</style>    "]}]}