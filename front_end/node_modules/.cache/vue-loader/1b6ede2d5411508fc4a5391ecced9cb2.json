{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\tb_detail\\ip.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\tb_detail\\ip.vue","mtime":1742892849636},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1733210776367},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:DQpleHBvcnQgZGVmYXVsdCB7DQogIGRhdGEoKSB7DQogICAgcmV0dXJuIHsNCiAgICAgIGdyYXBoRGF0YTogW10sDQogICAgICBkaWFsb2dWaXNpYmxlOiBmYWxzZSwNCiAgICAgIG1hcENvbmZpZzogew0KICAgICAgICBhdWRpdE5vOiAnR1MoMjAyNCkwNjUw5Y+3JywNCiAgICAgICAgc291cmNlOiAn5Zu95a625Zyw55CG5L+h5oGv5YWs5YWx5pyN5Yqh5bmz5Y+wJw0KICAgICAgfSwNCiAgICAgIC8vIOeJueauiuihjOaUv+WMuuWIkuaYoOWwhOihqO+8iOS4jemcgOimgeWKoCLnnIEi55qE5Zyw5Yy677yJDQogICAgICBzcGVjaWFsUmVnaW9uczogew0KICAgICAgICAn5YyX5LqsJzogJ+WMl+S6rOW4gicsDQogICAgICAgICflpKnmtKUnOiAn5aSp5rSl5biCJywNCiAgICAgICAgJ+S4iua1tyc6ICfkuIrmtbfluIInLA0KICAgICAgICAn6YeN5bqGJzogJ+mHjeW6huW4gicsDQogICAgICAgICflhoXokpnlj6QnOiAn5YaF6JKZ5Y+k6Ieq5rK75Yy6JywNCiAgICAgICAgJ+W5v+ilvyc6ICflub/opb/lo67ml4/oh6rmsrvljLonLA0KICAgICAgICAn6KW/6JePJzogJ+ilv+iXj+iHquayu+WMuicsDQogICAgICAgICflroHlpI8nOiAn5a6B5aSP5Zue5peP6Ieq5rK75Yy6JywNCiAgICAgICAgJ+aWsOeWhic6ICfmlrDnlobnu7TlkL7lsJToh6rmsrvljLonLA0KICAgICAgICAn6aaZ5rivJzogJ+mmmea4r+eJueWIq+ihjOaUv+WMuicsDQogICAgICAgICfmvrPpl6gnOiAn5r6z6Zeo54m55Yir6KGM5pS/5Yy6JywNCiAgICAgICAgJ+WPsOa5vic6ICflj7Dmub7nnIEnDQogICAgICB9DQogICAgfTsNCiAgfSwNCiAgbW91bnRlZCgpIHsNCiAgICB0aGlzLmZldGNoRGF0YUFuZERyYXdNYXAoJ2xvY2F0aW9uX2dyYXBoJyk7DQogIH0sDQogIG1ldGhvZHM6IHsNCiAgICAvLyDop4TojIPljJblnLDljLrlkI3np7ANCiAgICBub3JtYWxpemVSZWdpb25OYW1lKG5hbWUpIHsNCiAgICAgIC8vIOWmguaenOW3sue7j+aYr+WujOaVtOWQjeensO+8iOW4puecgS/luIIv5Yy677yJ5YiZ55u05o6l6L+U5ZueDQogICAgICBpZiAobmFtZS5lbmRzV2l0aCgn55yBJykgfHwgbmFtZS5lbmRzV2l0aCgn5biCJykgfHwgbmFtZS5lbmRzV2l0aCgn6Ieq5rK75Yy6JykgfHwgbmFtZS5lbmRzV2l0aCgn54m55Yir6KGM5pS/5Yy6JykpIHsNCiAgICAgICAgcmV0dXJuIG5hbWU7DQogICAgICB9DQoNCiAgICAgIC8vIOajgOafpeeJueauiuihjOaUv+WMug0KICAgICAgaWYgKHRoaXMuc3BlY2lhbFJlZ2lvbnNbbmFtZV0pIHsNCiAgICAgICAgcmV0dXJuIHRoaXMuc3BlY2lhbFJlZ2lvbnNbbmFtZV07DQogICAgICB9DQoNCiAgICAgIC8vIOaZrumAmuecgeS7veWKoOS4iiLnnIEi5ZCO57yADQogICAgICByZXR1cm4gbmFtZSArICfnnIEnOw0KICAgIH0sDQoNCiAgICBhc3luYyBmZXRjaERhdGFBbmREcmF3TWFwKGNvbnRhaW5lcklkKSB7DQogICAgICB0cnkgew0KICAgICAgICAvLyAxLiDliqDovb0gY2hpbmEuZ2VvanNvbiDmlofku7YNCiAgICAgICAgY29uc3QgZ2VvSnNvblJlc3BvbnNlID0gYXdhaXQgZmV0Y2goJy9nZW9qc29uL2NoaW5hLmdlb2pzb24nKTsNCiAgICAgICAgaWYgKCFnZW9Kc29uUmVzcG9uc2Uub2spIHRocm93IG5ldyBFcnJvcign5Zyw5Zu+5paH5Lu25Yqg6L295aSx6LSlJyk7DQogICAgICAgIGNvbnN0IGNoaW5hR2VvSlNPTiA9IGF3YWl0IGdlb0pzb25SZXNwb25zZS5qc29uKCk7DQogICAgICAgIHRoaXMuJGVjaGFydHMucmVnaXN0ZXJNYXAoJ2NoaW5hJywgY2hpbmFHZW9KU09OKTsNCg0KICAgICAgICAvLyAyLiDojrflj5bkuJrliqHmlbDmja4NCiAgICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy4kcm91dGUucXVlcnk7DQogICAgICAgIC8vIOWvuSBVUkwg5Y+C5pWw6L+b6KGM57yW56CBDQogICAgICAgIGNvbnN0IGVuY29kZWRVcmwgPSBlbmNvZGVVUklDb21wb25lbnQocXVlcnkudXJsKTsNCiAgICAgICAgY29uc3QgYXBpRW5kcG9pbnQgPSBjb250YWluZXJJZCA9PT0gJ2xvY2F0aW9uX2dyYXBoJyA/ICcvY29tbWVudC9pcCcgOiAnL2NvbW1lbnQvbG9jYXRpb25fdGInOw0KICAgICAgICBjb25zdCByZXMgPSBhd2FpdCB0aGlzLiRheGlvcy5nZXQoYCR7YXBpRW5kcG9pbnR9P3RhZ190YXNrX2lkPSR7cXVlcnkudGFnX3Rhc2tfaWR9JnVybD0ke2VuY29kZWRVcmx9YCk7DQoNCiAgICAgICAgY29uc3QgbG9jYXRpb25EYXRhID0gY29udGFpbmVySWQgPT09ICdsb2NhdGlvbl9ncmFwaCcgPyByZXMuZGF0YS5kYXRhLmRldGFpbCA6IHJlcy5kYXRhLmRhdGE7DQoNCiAgICAgICAgLy8g5a+55pWw5o2u6L+b6KGM6IGa5ZCI77yI55u45ZCM5Zyw5Yy65ZCI5bm26K6h5pWw77yJDQogICAgICAgIGNvbnN0IGRhdGFNYXAgPSB7fTsNCiAgICAgICAgbG9jYXRpb25EYXRhLmZvckVhY2goaXRlbSA9PiB7DQogICAgICAgICAgY29uc3Qgbm9ybWFsaXplZE5hbWUgPSB0aGlzLm5vcm1hbGl6ZVJlZ2lvbk5hbWUoaXRlbS5sb2NhdGlvbik7DQogICAgICAgICAgZGF0YU1hcFtub3JtYWxpemVkTmFtZV0gPSAoZGF0YU1hcFtub3JtYWxpemVkTmFtZV0gfHwgMCkgKyBpdGVtLmNvdW50Ow0KICAgICAgICB9KTsNCg0KICAgICAgICAvLyDovazmjaLkuLogZWNoYXJ0cyDpnIDopoHnmoTmoLzlvI8NCiAgICAgICAgdGhpcy5ncmFwaERhdGEgPSBPYmplY3Qua2V5cyhkYXRhTWFwKS5tYXAobmFtZSA9PiAoew0KICAgICAgICAgIG5hbWUsDQogICAgICAgICAgdmFsdWU6IGRhdGFNYXBbbmFtZV0NCiAgICAgICAgfSkpOw0KDQogICAgICAgIHRoaXMuZHJhd01hcChjb250YWluZXJJZCk7DQogICAgICB9IGNhdGNoIChlcnJvcikgew0KICAgICAgICBjb25zb2xlLmVycm9yKCfliJ3lp4vljJblpLHotKU6JywgZXJyb3IpOw0KICAgICAgfQ0KICAgIH0sDQoNCiAgICBkcmF3TWFwKGNvbnRhaW5lcklkKSB7DQogICAgICBjb25zdCBteUNoYXJ0ID0gdGhpcy4kZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKGNvbnRhaW5lcklkKSk7DQogICAgICBjb25zdCBtYXhDb3VudCA9IE1hdGgubWF4KC4uLnRoaXMuZ3JhcGhEYXRhLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpKTsNCg0KICAgICAgY29uc3Qgb3B0aW9uID0gew0KICAgICAgICAvLyB0aXRsZTogew0KICAgICAgICAvLyAgIHRleHQ6ICfor4TorrrlnLDnkIbkvY3nva7liIbluIMnLA0KICAgICAgICAvLyAgIGxlZnQ6ICdjZW50ZXInLA0KICAgICAgICAvLyAgIHRleHRTdHlsZTogew0KICAgICAgICAvLyAgICAgY29sb3I6ICcjZmZmZmZmJywNCiAgICAgICAgLy8gICAgIGZvbnRTaXplOiAxOCwNCiAgICAgICAgLy8gICAgIGZvbnRXZWlnaHQ6ICdib2xkJw0KICAgICAgICAvLyAgIH0NCiAgICAgICAgLy8gfSwNCiAgICAgICAgdG9vbHRpcDogew0KICAgICAgICAgIHRyaWdnZXI6ICdpdGVtJywNCiAgICAgICAgICBmb3JtYXR0ZXI6ICd7Yn06IHtjfSDor4TorronLA0KICAgICAgICAgIGJhY2tncm91bmRDb2xvcjogJ3JnYmEoMCwgMCwgMCwgMC44KScsDQogICAgICAgICAgYm9yZGVyQ29sb3I6ICcjNDBhOWZmJywNCiAgICAgICAgICB0ZXh0U3R5bGU6IHsNCiAgICAgICAgICAgIGNvbG9yOiAnI2ZmZmZmZicsDQogICAgICAgICAgICBmb250U2l6ZTogMTINCiAgICAgICAgICB9DQogICAgICAgIH0sDQogICAgICAgIHZpc3VhbE1hcDogew0KICAgICAgICAgIGxlZnQ6IGNvbnRhaW5lcklkID09PSAnbG9jYXRpb25fZ3JhcGgnID8gMjAgOiAnMTBweCcsDQogICAgICAgICAgYm90dG9tOiBjb250YWluZXJJZCA9PT0gJ2xvY2F0aW9uX2dyYXBoJyA/IDIwIDogdW5kZWZpbmVkLA0KICAgICAgICAgIHRvcDogY29udGFpbmVySWQgPT09ICdsb2NhdGlvbl9ncmFwaCcgPyB1bmRlZmluZWQgOiAnMTAlJywNCiAgICAgICAgICBoZWlnaHQ6IGNvbnRhaW5lcklkID09PSAnbG9jYXRpb25fZ3JhcGgnID8gMTAwIDogMTAsDQogICAgICAgICAgbWluOiAwLA0KICAgICAgICAgIG1heDogbWF4Q291bnQsDQogICAgICAgICAgaW5SYW5nZTogew0KICAgICAgICAgICAgY29sb3I6IFsnI2UwZjdlMCcsICcjMjhkYTdlJ10NCiAgICAgICAgICB9LA0KICAgICAgICAgIHRleHRTdHlsZTogew0KICAgICAgICAgICAgY29sb3I6ICcjZmZmJw0KICAgICAgICAgIH0sDQogICAgICAgICAgY2FsY3VsYWJsZTogdHJ1ZQ0KICAgICAgICB9LA0KICAgICAgICBncmFwaGljOiB7DQogICAgICAgICAgdHlwZTogJ3RleHQnLA0KICAgICAgICAgIGxlZnQ6IDUwLA0KICAgICAgICAgIGJvdHRvbTogMCwNCiAgICAgICAgICB6OiAxMDAsDQogICAgICAgICAgc3R5bGU6IHsNCiAgICAgICAgICAgIHRleHQ6IGDlrqHlm77lj7fvvJoke3RoaXMubWFwQ29uZmlnLmF1ZGl0Tm99IOadpea6kO+8miR7dGhpcy5tYXBDb25maWcuc291cmNlfWAsDQogICAgICAgICAgICBmb250OiAnMTJweCBNaWNyb3NvZnQgWWFIZWknLA0KICAgICAgICAgICAgZmlsbDogJyNmZmYnLA0KICAgICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLDAsMCwwKScsDQogICAgICAgICAgICBwYWRkaW5nOiBbNiwgMTBdLA0KICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0DQogICAgICAgICAgfQ0KICAgICAgICB9LA0KICAgICAgICBzZXJpZXM6IFt7DQogICAgICAgICAgbmFtZTogJ+WcsOeQhuS9jee9ruWIhuW4gycsDQogICAgICAgICAgdHlwZTogJ21hcCcsDQogICAgICAgICAgbWFwOiAnY2hpbmEnLA0KICAgICAgICAgIHJvYW06IHRydWUsDQogICAgICAgICAgbGFiZWw6IHsNCiAgICAgICAgICAgIHNob3c6IGZhbHNlLCAvLyDkuI3mmL7npLrnnIHku73mloflrZcNCiAgICAgICAgICAgIGNvbG9yOiAnIzAwMCcsDQogICAgICAgICAgICBmb250U2l6ZTogMTANCiAgICAgICAgICB9LA0KICAgICAgICAgIGl0ZW1TdHlsZTogew0KICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjNDBhOWZmJywNCiAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLA0KICAgICAgICAgICAgYXJlYUNvbG9yOiAnIzQyYWNlOWM4Jw0KICAgICAgICAgIH0sDQogICAgICAgICAgZW1waGFzaXM6IHsNCiAgICAgICAgICAgIGxhYmVsOiB7DQogICAgICAgICAgICAgIGNvbG9yOiAnI2ZmZicsDQogICAgICAgICAgICAgIGZvbnRTaXplOiAxMg0KICAgICAgICAgICAgfSwNCiAgICAgICAgICAgIGl0ZW1TdHlsZTogew0KICAgICAgICAgICAgICBhcmVhQ29sb3I6ICcjODljZDQ1Jw0KICAgICAgICAgICAgfQ0KICAgICAgICAgIH0sDQogICAgICAgICAgbGF5b3V0Q2VudGVyOiBbJzUwJScsICc1MCUnXSwgIC8vIOWcsOWbvuWxheS4reaYvuekug0KICAgICAgICAgIGxheW91dFNpemU6ICcxMDAlJywgIC8vIOWcsOWbvumAguW6lOeItue7hOS7tuWkp+Wwjw0KICAgICAgICAgIGRhdGE6IHRoaXMuZ3JhcGhEYXRhDQogICAgICAgIH1dDQogICAgICB9Ow0KDQogICAgICBteUNoYXJ0LnNldE9wdGlvbihvcHRpb24pOw0KDQogICAgICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4gbXlDaGFydC5yZXNpemUoKTsNCiAgICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCdyZXNpemUnLCByZXNpemVIYW5kbGVyKTsNCiAgICAgIHRoaXMuJG9uY2UoJ2hvb2s6YmVmb3JlRGVzdHJveScsICgpID0+IHsNCiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpOw0KICAgICAgICBteUNoYXJ0LmRpc3Bvc2UoKTsNCiAgICAgIH0pOw0KICAgIH0sDQoNCiAgICAvLyDmmL7npLrlnLDlm74NCiAgICBzaG93KCkgew0KICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZTsNCiAgICAgIHRoaXMuJG5leHRUaWNrKCgpID0+IHsNCiAgICAgICAgdGhpcy5mZXRjaERhdGFBbmREcmF3TWFwKCdtYXBDaGFydCcpOw0KICAgICAgfSk7DQogICAgfQ0KICB9DQp9Ow0K"},{"version":3,"sources":["ip.vue"],"names":[],"mappings":";AAefile":"ip.vue","sourceRoot":"src/components/tb_detail","sourcesContent":["<template>\r\n  <div class=\"location\">\r\n    <div class=\"location_title\">评论地理位置分布</div>\r\n    <!-- <el-button type=\"text\" @click=\"show\" class=\"maxTree\">点击打开地图</el-button> -->\r\n    <div id=\"location_graph\"></div>\r\n    <!-- <el-dialog title=\"地理位置大图\" :visible.sync=\"dialogVisible\" fullscreen=\"true\">\r\n      <div id=\"mapChart\"></div>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"dialogVisible = false\">确 定</el-button>\r\n      </span>\r\n    </el-dialog> -->\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      graphData: [],\r\n      dialogVisible: false,\r\n      mapConfig: {\r\n        auditNo: 'GS(2024)0650号',\r\n        source: '国家地理信息公共服务平台'\r\n      },\r\n      // 特殊行政区划映射表（不需要加\"省\"的地区）\r\n      specialRegions: {\r\n        '北京': '北京市',\r\n        '天津': '天津市',\r\n        '上海': '上海市',\r\n        '重庆': '重庆市',\r\n        '内蒙古': '内蒙古自治区',\r\n        '广西': '广西壮族自治区',\r\n        '西藏': '西藏自治区',\r\n        '宁夏': '宁夏回族自治区',\r\n        '新疆': '新疆维吾尔自治区',\r\n        '香港': '香港特别行政区',\r\n        '澳门': '澳门特别行政区',\r\n        '台湾': '台湾省'\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchDataAndDrawMap('location_graph');\r\n  },\r\n  methods: {\r\n    // 规范化地区名称\r\n    normalizeRegionName(name) {\r\n      // 如果已经是完整名称（带省/市/区）则直接返回\r\n      if (name.endsWith('省') || name.endsWith('市') || name.endsWith('自治区') || name.endsWith('特别行政区')) {\r\n        return name;\r\n      }\r\n\r\n      // 检查特殊行政区\r\n      if (this.specialRegions[name]) {\r\n        return this.specialRegions[name];\r\n      }\r\n\r\n      // 普通省份加上\"省\"后缀\r\n      return name + '省';\r\n    },\r\n\r\n    async fetchDataAndDrawMap(containerId) {\r\n      try {\r\n        // 1. 加载 china.geojson 文件\r\n        const geoJsonResponse = await fetch('/geojson/china.geojson');\r\n        if (!geoJsonResponse.ok) throw new Error('地图文件加载失败');\r\n        const chinaGeoJSON = await geoJsonResponse.json();\r\n        this.$echarts.registerMap('china', chinaGeoJSON);\r\n\r\n        // 2. 获取业务数据\r\n        let query = this.$route.query;\r\n        // 对 URL 参数进行编码\r\n        const encodedUrl = encodeURIComponent(query.url);\r\n        const apiEndpoint = containerId === 'location_graph' ? '/comment/ip' : '/comment/location_tb';\r\n        const res = await this.$axios.get(`${apiEndpoint}?tag_task_id=${query.tag_task_id}&url=${encodedUrl}`);\r\n\r\n        const locationData = containerId === 'location_graph' ? res.data.data.detail : res.data.data;\r\n\r\n        // 对数据进行聚合（相同地区合并计数）\r\n        const dataMap = {};\r\n        locationData.forEach(item => {\r\n          const normalizedName = this.normalizeRegionName(item.location);\r\n          dataMap[normalizedName] = (dataMap[normalizedName] || 0) + item.count;\r\n        });\r\n\r\n        // 转换为 echarts 需要的格式\r\n        this.graphData = Object.keys(dataMap).map(name => ({\r\n          name,\r\n          value: dataMap[name]\r\n        }));\r\n\r\n        this.drawMap(containerId);\r\n      } catch (error) {\r\n        console.error('初始化失败:', error);\r\n      }\r\n    },\r\n\r\n    drawMap(containerId) {\r\n      const myChart = this.$echarts.init(document.getElementById(containerId));\r\n      const maxCount = Math.max(...this.graphData.map(item => item.value));\r\n\r\n      const option = {\r\n        // title: {\r\n        //   text: '评论地理位置分布',\r\n        //   left: 'center',\r\n        //   textStyle: {\r\n        //     color: '#ffffff',\r\n        //     fontSize: 18,\r\n        //     fontWeight: 'bold'\r\n        //   }\r\n        // },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{b}: {c} 评论',\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          borderColor: '#40a9ff',\r\n          textStyle: {\r\n            color: '#ffffff',\r\n            fontSize: 12\r\n          }\r\n        },\r\n        visualMap: {\r\n          left: containerId === 'location_graph' ? 20 : '10px',\r\n          bottom: containerId === 'location_graph' ? 20 : undefined,\r\n          top: containerId === 'location_graph' ? undefined : '10%',\r\n          height: containerId === 'location_graph' ? 100 : 10,\r\n          min: 0,\r\n          max: maxCount,\r\n          inRange: {\r\n            color: ['#e0f7e0', '#28da7e']\r\n          },\r\n          textStyle: {\r\n            color: '#fff'\r\n          },\r\n          calculable: true\r\n        },\r\n        graphic: {\r\n          type: 'text',\r\n          left: 50,\r\n          bottom: 0,\r\n          z: 100,\r\n          style: {\r\n            text: `审图号：${this.mapConfig.auditNo} 来源：${this.mapConfig.source}`,\r\n            font: '12px Microsoft YaHei',\r\n            fill: '#fff',\r\n            backgroundColor: 'rgba(0,0,0,0)',\r\n            padding: [6, 10],\r\n            borderRadius: 4\r\n          }\r\n        },\r\n        series: [{\r\n          name: '地理位置分布',\r\n          type: 'map',\r\n          map: 'china',\r\n          roam: true,\r\n          label: {\r\n            show: false, // 不显示省份文字\r\n            color: '#000',\r\n            fontSize: 10\r\n          },\r\n          itemStyle: {\r\n            borderColor: '#40a9ff',\r\n            borderWidth: 1,\r\n            areaColor: '#42ace9c8'\r\n          },\r\n          emphasis: {\r\n            label: {\r\n              color: '#fff',\r\n              fontSize: 12\r\n            },\r\n            itemStyle: {\r\n              areaColor: '#89cd45'\r\n            }\r\n          },\r\n          layoutCenter: ['50%', '50%'],  // 地图居中显示\r\n          layoutSize: '100%',  // 地图适应父组件大小\r\n          data: this.graphData\r\n        }]\r\n      };\r\n\r\n      myChart.setOption(option);\r\n\r\n      const resizeHandler = () => myChart.resize();\r\n      window.addEventListener('resize', resizeHandler);\r\n      this.$once('hook:beforeDestroy', () => {\r\n        window.removeEventListener('resize', resizeHandler);\r\n        myChart.dispose();\r\n      });\r\n    },\r\n\r\n    // 显示地图\r\n    show() {\r\n      this.dialogVisible = true;\r\n      this.$nextTick(() => {\r\n        this.fetchDataAndDrawMap('mapChart');\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.location {\r\n  position: relative;\r\n  top: 1%;\r\n  width: 100%;\r\n  height: 90%;\r\n  background-color: #ffffff00;\r\n  color: #ffff;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);\r\n  /* border: 2px solid #669ef3a5; 深色边框 */\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  backdrop-filter: blur(3px);\r\n  -webkit-backdrop-filter: blur(10px);\r\n  overflow: hidden;\r\n}\r\n.location_title {\r\n  margin-left: 20px;\r\n  padding: 5px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n}\r\n#location_graph {\r\n  width: 450px;\r\n  height: 310px;\r\n  top: 30px;\r\n  margin-left: 10%;\r\n  margin-bottom: 10%;\r\n}\r\n#mapChart {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 90%;\r\n}\r\n</style>    "]}]}