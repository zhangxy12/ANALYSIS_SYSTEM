{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\mainscreen\\ip.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\mainscreen\\ip.vue","mtime":1742892877187},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\babel.config.js","mtime":1732591727371},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1733210776367},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuZXJyb3IuY2F1c2UuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IuY29uc3RydWN0b3IuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IuZm9yLWVhY2guanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lc25leHQuaXRlcmF0b3IubWFwLmpzIjsKZXhwb3J0IGRlZmF1bHQgewogIGRhdGEoKSB7CiAgICByZXR1cm4gewogICAgICBncmFwaERhdGE6IFtdLAogICAgICBtYXBDb25maWc6IHsKICAgICAgICBhdWRpdE5vOiAnR1MoMjAyNCkwNjUw5Y+3JywKICAgICAgICBzb3VyY2U6ICflm73lrrblnLDnkIbkv6Hmga/lhazlhbHmnI3liqHlubPlj7AnCiAgICAgIH0sCiAgICAgIC8vIOeJueauiuihjOaUv+WMuuWIkuaYoOWwhOihqO+8iOS4jemcgOimgeWKoCLnnIEi55qE5Zyw5Yy677yJCiAgICAgIHNwZWNpYWxSZWdpb25zOiB7CiAgICAgICAgJ+WMl+S6rCc6ICfljJfkuqzluIInLAogICAgICAgICflpKnmtKUnOiAn5aSp5rSl5biCJywKICAgICAgICAn5LiK5rW3JzogJ+S4iua1t+W4gicsCiAgICAgICAgJ+mHjeW6hic6ICfph43luobluIInLAogICAgICAgICflhoXokpnlj6QnOiAn5YaF6JKZ5Y+k6Ieq5rK75Yy6JywKICAgICAgICAn5bm/6KW/JzogJ+W5v+ilv+WjruaXj+iHquayu+WMuicsCiAgICAgICAgJ+ilv+iXjyc6ICfopb/ol4/oh6rmsrvljLonLAogICAgICAgICflroHlpI8nOiAn5a6B5aSP5Zue5peP6Ieq5rK75Yy6JywKICAgICAgICAn5paw55aGJzogJ+aWsOeWhue7tOWQvuWwlOiHquayu+WMuicsCiAgICAgICAgJ+mmmea4ryc6ICfpppnmuK/nibnliKvooYzmlL/ljLonLAogICAgICAgICfmvrPpl6gnOiAn5r6z6Zeo54m55Yir6KGM5pS/5Yy6JywKICAgICAgICAn5Y+w5rm+JzogJ+WPsOa5vuecgScKICAgICAgfQogICAgfTsKICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLmZldGNoRGF0YUFuZERyYXdNYXAoKTsKICB9LAogIG1ldGhvZHM6IHsKICAgIC8vIOinhOiMg+WMluWcsOWMuuWQjeensAogICAgbm9ybWFsaXplUmVnaW9uTmFtZShuYW1lKSB7CiAgICAgIC8vIOWmguaenOW3sue7j+aYr+WujOaVtOWQjeensO+8iOW4puecgS/luIIv5Yy677yJ5YiZ55u05o6l6L+U5ZueCiAgICAgIGlmIChuYW1lLmVuZHNXaXRoKCfnnIEnKSB8fCBuYW1lLmVuZHNXaXRoKCfluIInKSB8fCBuYW1lLmVuZHNXaXRoKCfoh6rmsrvljLonKSB8fCBuYW1lLmVuZHNXaXRoKCfnibnliKvooYzmlL/ljLonKSkgewogICAgICAgIHJldHVybiBuYW1lOwogICAgICB9CgogICAgICAvLyDmo4Dmn6XnibnmrorooYzmlL/ljLoKICAgICAgaWYgKHRoaXMuc3BlY2lhbFJlZ2lvbnNbbmFtZV0pIHsKICAgICAgICByZXR1cm4gdGhpcy5zcGVjaWFsUmVnaW9uc1tuYW1lXTsKICAgICAgfQoKICAgICAgLy8g5pmu6YCa55yB5Lu95Yqg5LiKIuecgSLlkI7nvIAKICAgICAgcmV0dXJuIG5hbWUgKyAn55yBJzsKICAgIH0sCiAgICBhc3luYyBmZXRjaERhdGFBbmREcmF3TWFwKCkgewogICAgICB0cnkgewogICAgICAgIC8vIDEuIOWKoOi9vWNoaW5hLmdlb2pzb27mlofku7YKICAgICAgICBjb25zdCBnZW9Kc29uUmVzcG9uc2UgPSBhd2FpdCBmZXRjaCgnL2dlb2pzb24vY2hpbmEuZ2VvanNvbicpOwogICAgICAgIGlmICghZ2VvSnNvblJlc3BvbnNlLm9rKSB0aHJvdyBuZXcgRXJyb3IoJ+WcsOWbvuaWh+S7tuWKoOi9veWksei0pScpOwogICAgICAgIGNvbnN0IGNoaW5hR2VvSlNPTiA9IGF3YWl0IGdlb0pzb25SZXNwb25zZS5qc29uKCk7CiAgICAgICAgdGhpcy4kZWNoYXJ0cy5yZWdpc3Rlck1hcCgnY2hpbmEnLCBjaGluYUdlb0pTT04pOwoKICAgICAgICAvLyAyLiDojrflj5bkuJrliqHmlbDmja7lubbop4TojIPljJblnLDljLrlkI3np7AKICAgICAgICBjb25zdCByZXNwb25zZSA9IGF3YWl0IHRoaXMuJGF4aW9zLmdldCgnL21haW4vc3RhcnRfaXAnKTsKICAgICAgICBpZiAocmVzcG9uc2UuZGF0YS5jb2RlID09PSAyMDApIHsKICAgICAgICAgIGNvbnN0IGdyYXBoUmVzcG9uc2UgPSBhd2FpdCB0aGlzLiRheGlvcy5nZXQoJy9tYWluL2FsbF9pcCcpOwogICAgICAgICAgLy8g5a+55pWw5o2u6L+b6KGM6IGa5ZCI77yI55u45ZCM5Zyw5Yy65ZCI5bm26K6h5pWw77yJCiAgICAgICAgICBjb25zdCBkYXRhTWFwID0ge307CiAgICAgICAgICBncmFwaFJlc3BvbnNlLmRhdGEuZGF0YS5kZXRhaWwuZm9yRWFjaChpdGVtID0+IHsKICAgICAgICAgICAgY29uc3Qgbm9ybWFsaXplZE5hbWUgPSB0aGlzLm5vcm1hbGl6ZVJlZ2lvbk5hbWUoaXRlbS5sb2NhdGlvbik7CiAgICAgICAgICAgIGRhdGFNYXBbbm9ybWFsaXplZE5hbWVdID0gKGRhdGFNYXBbbm9ybWFsaXplZE5hbWVdIHx8IDApICsgaXRlbS5jb3VudDsKICAgICAgICAgIH0pOwoKICAgICAgICAgIC8vIOi9rOaNouS4umVjaGFydHPpnIDopoHnmoTmoLzlvI8KICAgICAgICAgIHRoaXMuZ3JhcGhEYXRhID0gT2JqZWN0LmtleXMoZGF0YU1hcCkubWFwKG5hbWUgPT4gKHsKICAgICAgICAgICAgbmFtZSwKICAgICAgICAgICAgdmFsdWU6IGRhdGFNYXBbbmFtZV0KICAgICAgICAgIH0pKTsKICAgICAgICAgIHRoaXMuZHJhd01hcCgpOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICBjb25zb2xlLmVycm9yKCfliJ3lp4vljJblpLHotKU6JywgZXJyb3IpOwogICAgICB9CiAgICB9LAogICAgZHJhd01hcCgpIHsKICAgICAgY29uc3QgbXlDaGFydCA9IHRoaXMuJGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgnbWFwLWNoYXJ0JykpOwogICAgICBjb25zdCBtYXhDb3VudCA9IE1hdGgubWF4KC4uLnRoaXMuZ3JhcGhEYXRhLm1hcChpdGVtID0+IGl0ZW0udmFsdWUpKTsKICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgIHRpdGxlOiB7CiAgICAgICAgICB0ZXh0OiAn5Zyw55CG5L2N572u5YiG5biDJywKICAgICAgICAgIGxlZnQ6ICdjZW50ZXInLAogICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiAnI2ZmZmZmZicsCiAgICAgICAgICAgIGZvbnRTaXplOiAxOCwKICAgICAgICAgICAgZm9udFdlaWdodDogJ2JvbGQnCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB0b29sdGlwOiB7CiAgICAgICAgICB0cmlnZ2VyOiAnaXRlbScsCiAgICAgICAgICBmb3JtYXR0ZXI6ICd7Yn06IHtjfSDkuronLAogICAgICAgICAgYmFja2dyb3VuZENvbG9yOiAncmdiYSgwLCAwLCAwLCAwLjgpJywKICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzQwYTlmZicsCiAgICAgICAgICB0ZXh0U3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJywKICAgICAgICAgICAgZm9udFNpemU6IDEyCiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICB2aXN1YWxNYXA6IHsKICAgICAgICAgIGxlZnQ6IDIwLAogICAgICAgICAgYm90dG9tOiAyMCwKICAgICAgICAgIG1pbjogMCwKICAgICAgICAgIG1heDogbWF4Q291bnQsCiAgICAgICAgICBpblJhbmdlOiB7CiAgICAgICAgICAgIGNvbG9yOiBbJyM5ZWNhZTgnLCAnIzIxNzFiNScsICcjMDk2ZGQ5JywgJyMwODUxOWMnXQogICAgICAgICAgfSwKICAgICAgICAgIHRleHRTdHlsZTogewogICAgICAgICAgICBjb2xvcjogJyNmZmYnCiAgICAgICAgICB9LAogICAgICAgICAgaXRlbVdpZHRoOiAxMCwKICAgICAgICAgIGl0ZW1IZWlnaHQ6IDEwMCwKICAgICAgICAgIGNhbGN1bGFibGU6IHRydWUKICAgICAgICB9LAogICAgICAgIGdyYXBoaWM6IHsKICAgICAgICAgIHR5cGU6ICd0ZXh0JywKICAgICAgICAgIGxlZnQ6IDUwLAogICAgICAgICAgYm90dG9tOiAwLAogICAgICAgICAgejogMTAwLAogICAgICAgICAgc3R5bGU6IHsKICAgICAgICAgICAgdGV4dDogYOWuoeWbvuWPt++8miR7dGhpcy5tYXBDb25maWcuYXVkaXROb30g5p2l5rqQ77yaJHt0aGlzLm1hcENvbmZpZy5zb3VyY2V9YCwKICAgICAgICAgICAgZm9udDogJzEycHggTWljcm9zb2Z0IFlhSGVpJywKICAgICAgICAgICAgZmlsbDogJyNmZmYnLAogICAgICAgICAgICBiYWNrZ3JvdW5kQ29sb3I6ICdyZ2JhKDAsMCwwLDApJywKICAgICAgICAgICAgcGFkZGluZzogWzYsIDEwXSwKICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiA0CiAgICAgICAgICB9CiAgICAgICAgfSwKICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICBuYW1lOiAn5YiG5biD5pWw5o2uJywKICAgICAgICAgIHR5cGU6ICdtYXAnLAogICAgICAgICAgbWFwOiAnY2hpbmEnLAogICAgICAgICAgcm9hbTogdHJ1ZSwKICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgIHNob3c6IGZhbHNlLAogICAgICAgICAgICAvLyDkuI3mmL7npLrnnIHku73mloflrZcKICAgICAgICAgICAgY29sb3I6ICcjMDAwJywKICAgICAgICAgICAgZm9udFNpemU6IDEwCiAgICAgICAgICB9LAogICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnIzQwYTlmZicsCiAgICAgICAgICAgIGJvcmRlcldpZHRoOiAxLAogICAgICAgICAgICBhcmVhQ29sb3I6ICcjQjBDNERFJwogICAgICAgICAgfSwKICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgY29sb3I6ICcjZmZmJywKICAgICAgICAgICAgICBmb250U2l6ZTogMTIKICAgICAgICAgICAgfSwKICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgYXJlYUNvbG9yOiAnIzQwYTlmZicKICAgICAgICAgICAgfQogICAgICAgICAgfSwKICAgICAgICAgIGxheW91dENlbnRlcjogWyc1MCUnLCAnNTAlJ10sCiAgICAgICAgICAvLyDlnLDlm77lsYXkuK3mmL7npLoKICAgICAgICAgIGxheW91dFNpemU6ICcxMDAlJywKICAgICAgICAgIC8vIOWcsOWbvumAguW6lOeItue7hOS7tuWkp+WwjwogICAgICAgICAgZGF0YTogdGhpcy5ncmFwaERhdGEKICAgICAgICB9XQogICAgICB9OwogICAgICBteUNoYXJ0LnNldE9wdGlvbihvcHRpb24pOwogICAgICBjb25zdCByZXNpemVIYW5kbGVyID0gKCkgPT4gbXlDaGFydC5yZXNpemUoKTsKICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpOwogICAgICB0aGlzLiRvbmNlKCdob29rOmJlZm9yZURlc3Ryb3knLCAoKSA9PiB7CiAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHJlc2l6ZUhhbmRsZXIpOwogICAgICAgIG15Q2hhcnQuZGlzcG9zZSgpOwogICAgICB9KTsKICAgIH0KICB9Cn07"},{"version":3,"names":["data","graphData","mapConfig","auditNo","source","specialRegions","mounted","fetchDataAndDrawMap","methods","normalizeRegionName","name","endsWith","geoJsonResponse","fetch","ok","Error","chinaGeoJSON","json","$echarts","registerMap","response","$axios","get","code","graphResponse","dataMap","detail","forEach","item","normalizedName","location","count","Object","keys","map","value","drawMap","error","console","myChart","init","document","getElementById","maxCount","Math","max","option","title","text","left","textStyle","color","fontSize","fontWeight","tooltip","trigger","formatter","backgroundColor","borderColor","visualMap","bottom","min","inRange","itemWidth","itemHeight","calculable","graphic","type","z","style","font","fill","padding","borderRadius","series","roam","label","show","itemStyle","borderWidth","areaColor","emphasis","layoutCenter","layoutSize","setOption","resizeHandler","resize","window","addEventListener","$once","removeEventListener","dispose"],"sources":["src/components/mainscreen/ip.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div id=\"map-chart\" style=\"width: 100%; height: 400px;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  data() {\r\n    return {\r\n      graphData: [],\r\n      mapConfig: {\r\n        auditNo: 'GS(2024)0650号',\r\n        source: '国家地理信息公共服务平台'\r\n      },\r\n      // 特殊行政区划映射表（不需要加\"省\"的地区）\r\n      specialRegions: {\r\n        '北京': '北京市',\r\n        '天津': '天津市',\r\n        '上海': '上海市',\r\n        '重庆': '重庆市',\r\n        '内蒙古': '内蒙古自治区',\r\n        '广西': '广西壮族自治区',\r\n        '西藏': '西藏自治区',\r\n        '宁夏': '宁夏回族自治区',\r\n        '新疆': '新疆维吾尔自治区',\r\n        '香港': '香港特别行政区',\r\n        '澳门': '澳门特别行政区',\r\n        '台湾': '台湾省'\r\n      }\r\n    };\r\n  },\r\n  mounted() {\r\n    this.fetchDataAndDrawMap();\r\n  },\r\n  methods: {\r\n    // 规范化地区名称\r\n    normalizeRegionName(name) {\r\n      // 如果已经是完整名称（带省/市/区）则直接返回\r\n      if (name.endsWith('省') || name.endsWith('市') || name.endsWith('自治区') || name.endsWith('特别行政区')) {\r\n        return name;\r\n      }\r\n      \r\n      // 检查特殊行政区\r\n      if (this.specialRegions[name]) {\r\n        return this.specialRegions[name];\r\n      }\r\n      \r\n      // 普通省份加上\"省\"后缀\r\n      return name + '省';\r\n    },\r\n\r\n    async fetchDataAndDrawMap() {\r\n      try {\r\n        // 1. 加载china.geojson文件\r\n        const geoJsonResponse = await fetch('/geojson/china.geojson');\r\n        if (!geoJsonResponse.ok) throw new Error('地图文件加载失败');\r\n        const chinaGeoJSON = await geoJsonResponse.json();\r\n        this.$echarts.registerMap('china', chinaGeoJSON);\r\n\r\n        // 2. 获取业务数据并规范化地区名称\r\n        const response = await this.$axios.get('/main/start_ip');\r\n        if (response.data.code === 200) {\r\n          const graphResponse = await this.$axios.get('/main/all_ip');\r\n          // 对数据进行聚合（相同地区合并计数）\r\n          const dataMap = {};\r\n          graphResponse.data.data.detail.forEach(item => {\r\n            const normalizedName = this.normalizeRegionName(item.location);\r\n            dataMap[normalizedName] = (dataMap[normalizedName] || 0) + item.count;\r\n          });\r\n          \r\n          // 转换为echarts需要的格式\r\n          this.graphData = Object.keys(dataMap).map(name => ({\r\n            name,\r\n            value: dataMap[name]\r\n          }));\r\n          \r\n          this.drawMap();\r\n        }\r\n      } catch (error) {\r\n        console.error('初始化失败:', error);\r\n      }\r\n    },\r\n\r\n    drawMap() {\r\n      const myChart = this.$echarts.init(document.getElementById('map-chart'));\r\n      const maxCount = Math.max(...this.graphData.map(item => item.value));\r\n\r\n      const option = {\r\n        title: {\r\n          text: '地理位置分布',\r\n          left: 'center',\r\n          textStyle: {\r\n            color: '#ffffff',\r\n            fontSize: 18,\r\n            fontWeight: 'bold'\r\n          }\r\n        },\r\n        tooltip: {\r\n          trigger: 'item',\r\n          formatter: '{b}: {c} 人',\r\n          backgroundColor: 'rgba(0, 0, 0, 0.8)',\r\n          borderColor: '#40a9ff',\r\n          textStyle: {\r\n            color: '#ffffff',\r\n            fontSize: 12\r\n          }\r\n        },\r\n        visualMap: {\r\n          left: 20,\r\n          bottom:20,\r\n          min: 0,\r\n          max: maxCount,\r\n          inRange: {\r\n            color: ['#9ecae8', '#2171b5', '#096dd9', '#08519c']\r\n          },\r\n          textStyle: {\r\n            color: '#fff'\r\n          },\r\n          itemWidth: 10,\r\n          itemHeight: 100,\r\n          calculable: true\r\n        },\r\n        graphic: {\r\n          type: 'text',\r\n          left: 50,\r\n          bottom: 0,\r\n          z: 100,\r\n          style: {\r\n            text: `审图号：${this.mapConfig.auditNo} 来源：${this.mapConfig.source}`,\r\n            font: '12px Microsoft YaHei',\r\n            fill: '#fff',\r\n            backgroundColor: 'rgba(0,0,0,0)',\r\n            padding: [6, 10],\r\n            borderRadius: 4\r\n          }\r\n        },\r\n        series: [{\r\n          name: '分布数据',\r\n          type: 'map',\r\n          map: 'china',\r\n          roam: true,\r\n          label: {\r\n            show: false, // 不显示省份文字\r\n            color: '#000',\r\n            fontSize: 10\r\n          },\r\n          itemStyle: {\r\n            borderColor: '#40a9ff',\r\n            borderWidth: 1,\r\n            areaColor: '#B0C4DE'\r\n          },\r\n          emphasis: {\r\n            label: {\r\n              color: '#fff',\r\n              fontSize: 12\r\n            },\r\n            itemStyle: {\r\n              areaColor: '#40a9ff'\r\n            }\r\n          },\r\n          layoutCenter: ['50%', '50%'],  // 地图居中显示\r\n          layoutSize: '100%',  // 地图适应父组件大小\r\n          data: this.graphData\r\n        }]\r\n      };\r\n\r\n      myChart.setOption(option);\r\n\r\n      const resizeHandler = () => myChart.resize();\r\n      window.addEventListener('resize', resizeHandler);\r\n      this.$once('hook:beforeDestroy', () => {\r\n        window.removeEventListener('resize', resizeHandler);\r\n        myChart.dispose();\r\n      });\r\n    }\r\n  }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n#map-chart {\r\n  background: #1e1e2f;\r\n  border-radius: 4px;\r\n  box-shadow: 0 2px 10px rgba(0, 0, 0, 0.5);\r\n}\r\n</style>    "],"mappings":"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","ignoreList":[]}]}