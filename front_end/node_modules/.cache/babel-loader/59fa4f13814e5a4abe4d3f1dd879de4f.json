{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\@jiaminghi\\data-view\\lib\\components\\percentPond\\src\\main.vue","mtime":1741680180025},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\babel.config.js","mtime":1732591727371},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1733210776367},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLm1hcC5qcyI7CmltcG9ydCB7IHV1aWQgfSBmcm9tICcuLi8uLi8uLi91dGlsL2luZGV4JzsKaW1wb3J0IHsgZGVlcE1lcmdlIH0gZnJvbSAnQGppYW1pbmdoaS9jaGFydHMvbGliL3V0aWwvaW5kZXgnOwppbXBvcnQgeyBkZWVwQ2xvbmUgfSBmcm9tICdAamlhbWluZ2hpL2MtcmVuZGVyL2xpYi9wbHVnaW4vdXRpbCc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnRHZQZXJjZW50UG9uZCcsCiAgcHJvcHM6IHsKICAgIGNvbmZpZzogewogICAgICB0eXBlOiBPYmplY3QsCiAgICAgIGRlZmF1bHQ6ICgpID0+ICh7fSkKICAgIH0KICB9LAogIGRhdGEoKSB7CiAgICBjb25zdCBpZCA9IHV1aWQoKTsKICAgIHJldHVybiB7CiAgICAgIGdyYWRpZW50SWQxOiBgcGVyY2VudC1wb25kLWdyYWRpZW50SWQxLSR7aWR9YCwKICAgICAgZ3JhZGllbnRJZDI6IGBwZXJjZW50LXBvbmQtZ3JhZGllbnRJZDItJHtpZH1gLAogICAgICB3aWR0aDogMCwKICAgICAgaGVpZ2h0OiAwLAogICAgICBkZWZhdWx0Q29uZmlnOiB7CiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFZhbHVlCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCB2YWx1ZSA9IDAKICAgICAgICAgKi8KICAgICAgICB2YWx1ZTogMCwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gQ29sb3JzIChoZXh8cmdifHJnYmF8Y29sb3Iga2V5d29yZHMpCiAgICAgICAgICogQHR5cGUge0FycmF5PFN0cmluZz59CiAgICAgICAgICogQGRlZmF1bHQgY29sb3JzID0gWycjMDBCQUZGJywgJyMzREU3QzknXQogICAgICAgICAqIEBleGFtcGxlIGNvbG9ycyA9IFsnIzAwMCcsICdyZ2IoMCwgMCwgMCknLCAncmdiYSgwLCAwLCAwLCAxKScsICdyZWQnXQogICAgICAgICAqLwogICAgICAgIGNvbG9yczogWycjM0RFN0M5JywgJyMwMEJBRkYnXSwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gQm9yZGVyIHdpZHRoCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBib3JkZXJXaWR0aCA9IDMKICAgICAgICAgKi8KICAgICAgICBib3JkZXJXaWR0aDogMywKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gR2FwIGJldHdlZW4gYm9yZGVyIGFuZCBwb25kCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBib3JkZXJHYXAgPSAzCiAgICAgICAgICovCiAgICAgICAgYm9yZGVyR2FwOiAzLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBMaW5lIGRhc2gKICAgICAgICAgKiBAdHlwZSB7QXJyYXk8TnVtYmVyPn0KICAgICAgICAgKiBAZGVmYXVsdCBsaW5lRGFzaCA9IFs1LCAxXQogICAgICAgICAqLwogICAgICAgIGxpbmVEYXNoOiBbNSwgMV0sCiAgICAgICAgLyoqCiAgICAgICAgICogQGRlc2NyaXB0aW9uIFRleHQgY29sb3IKICAgICAgICAgKiBAdHlwZSB7U3RyaW5nfQogICAgICAgICAqIEBkZWZhdWx0IHRleHRDb2xvciA9ICcjZmZmJwogICAgICAgICAqLwogICAgICAgIHRleHRDb2xvcjogJyNmZmYnLAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBCb3JkZXIgcmFkaXVzCiAgICAgICAgICogQHR5cGUge051bWJlcn0KICAgICAgICAgKiBAZGVmYXVsdCBib3JkZXJSYWRpdXMgPSA1CiAgICAgICAgICovCiAgICAgICAgYm9yZGVyUmFkaXVzOiA1LAogICAgICAgIC8qKgogICAgICAgICAqIEBkZXNjcmlwdGlvbiBMb2NhbCBHcmFkaWVudAogICAgICAgICAqIEB0eXBlIHtCb29sZWFufQogICAgICAgICAqIEBkZWZhdWx0IGxvY2FsR3JhZGllbnQgPSBmYWxzZQogICAgICAgICAqIEBleGFtcGxlIGxvY2FsR3JhZGllbnQgPSBmYWxzZSB8IHRydWUKICAgICAgICAgKi8KICAgICAgICBsb2NhbEdyYWRpZW50OiBmYWxzZSwKICAgICAgICAvKioKICAgICAgICAgKiBAZGVzY3JpcHRpb24gRm9ybWF0dGVyCiAgICAgICAgICogQHR5cGUge1N0cmluZ30KICAgICAgICAgKiBAZGVmYXVsdCBmb3JtYXR0ZXIgPSAne3ZhbHVlfSUnCiAgICAgICAgICovCiAgICAgICAgZm9ybWF0dGVyOiAne3ZhbHVlfSUnCiAgICAgIH0sCiAgICAgIG1lcmdlZENvbmZpZzogbnVsbAogICAgfTsKICB9LAogIGNvbXB1dGVkOiB7CiAgICByZWN0V2lkdGgoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBtZXJnZWRDb25maWcsCiAgICAgICAgd2lkdGgKICAgICAgfSA9IHRoaXM7CiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gMDsKICAgICAgY29uc3QgewogICAgICAgIGJvcmRlcldpZHRoCiAgICAgIH0gPSBtZXJnZWRDb25maWc7CiAgICAgIHJldHVybiB3aWR0aCAtIGJvcmRlcldpZHRoOwogICAgfSwKICAgIHJlY3RIZWlnaHQoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBtZXJnZWRDb25maWcsCiAgICAgICAgaGVpZ2h0CiAgICAgIH0gPSB0aGlzOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuIDA7CiAgICAgIGNvbnN0IHsKICAgICAgICBib3JkZXJXaWR0aAogICAgICB9ID0gbWVyZ2VkQ29uZmlnOwogICAgICByZXR1cm4gaGVpZ2h0IC0gYm9yZGVyV2lkdGg7CiAgICB9LAogICAgcG9pbnRzKCkgewogICAgICBjb25zdCB7CiAgICAgICAgbWVyZ2VkQ29uZmlnLAogICAgICAgIHdpZHRoLAogICAgICAgIGhlaWdodAogICAgICB9ID0gdGhpczsKICAgICAgY29uc3QgaGFsZkhlaWdodCA9IGhlaWdodCAvIDI7CiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gYDAsICR7aGFsZkhlaWdodH0gMCwgJHtoYWxmSGVpZ2h0fWA7CiAgICAgIGNvbnN0IHsKICAgICAgICBib3JkZXJXaWR0aCwKICAgICAgICBib3JkZXJHYXAsCiAgICAgICAgdmFsdWUKICAgICAgfSA9IG1lcmdlZENvbmZpZzsKICAgICAgY29uc3QgcG9seWxpbmVMZW5ndGggPSAod2lkdGggLSAoYm9yZGVyV2lkdGggKyBib3JkZXJHYXApICogMikgLyAxMDAgKiB2YWx1ZTsKICAgICAgcmV0dXJuIGAKICAgICAgICAke2JvcmRlcldpZHRoICsgYm9yZGVyR2FwfSwgJHtoYWxmSGVpZ2h0fQogICAgICAgICR7Ym9yZGVyV2lkdGggKyBib3JkZXJHYXAgKyBwb2x5bGluZUxlbmd0aH0sICR7aGFsZkhlaWdodCArIDAuMDAxfQogICAgICBgOwogICAgfSwKICAgIHBvbHlsaW5lV2lkdGgoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBtZXJnZWRDb25maWcsCiAgICAgICAgaGVpZ2h0CiAgICAgIH0gPSB0aGlzOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuIDA7CiAgICAgIGNvbnN0IHsKICAgICAgICBib3JkZXJXaWR0aCwKICAgICAgICBib3JkZXJHYXAKICAgICAgfSA9IG1lcmdlZENvbmZpZzsKICAgICAgcmV0dXJuIGhlaWdodCAtIChib3JkZXJXaWR0aCArIGJvcmRlckdhcCkgKiAyOwogICAgfSwKICAgIGxpbmVhckdyYWRpZW50KCkgewogICAgICBjb25zdCB7CiAgICAgICAgbWVyZ2VkQ29uZmlnCiAgICAgIH0gPSB0aGlzOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuIFtdOwogICAgICBjb25zdCB7CiAgICAgICAgY29sb3JzCiAgICAgIH0gPSBtZXJnZWRDb25maWc7CiAgICAgIGNvbnN0IGNvbG9yTnVtID0gY29sb3JzLmxlbmd0aDsKICAgICAgY29uc3QgY29sb3JPZmZzZXRHYXAgPSAxMDAgLyAoY29sb3JOdW0gLSAxKTsKICAgICAgcmV0dXJuIGNvbG9ycy5tYXAoKGMsIGkpID0+IFtjb2xvck9mZnNldEdhcCAqIGksIGNdKTsKICAgIH0sCiAgICBwb2x5bGluZUdyYWRpZW50KCkgewogICAgICBjb25zdCB7CiAgICAgICAgZ3JhZGllbnRJZDEsCiAgICAgICAgZ3JhZGllbnRJZDIsCiAgICAgICAgbWVyZ2VkQ29uZmlnCiAgICAgIH0gPSB0aGlzOwogICAgICBpZiAoIW1lcmdlZENvbmZpZykgcmV0dXJuIGdyYWRpZW50SWQyOwogICAgICBpZiAobWVyZ2VkQ29uZmlnLmxvY2FsR3JhZGllbnQpIHJldHVybiBncmFkaWVudElkMTsKICAgICAgcmV0dXJuIGdyYWRpZW50SWQyOwogICAgfSwKICAgIGdyYWRpZW50MlhQb3MoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBtZXJnZWRDb25maWcKICAgICAgfSA9IHRoaXM7CiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gJzEwMCUnOwogICAgICBjb25zdCB7CiAgICAgICAgdmFsdWUKICAgICAgfSA9IG1lcmdlZENvbmZpZzsKICAgICAgcmV0dXJuIGAkezIwMCAtIHZhbHVlfSVgOwogICAgfSwKICAgIGRldGFpbHMoKSB7CiAgICAgIGNvbnN0IHsKICAgICAgICBtZXJnZWRDb25maWcKICAgICAgfSA9IHRoaXM7CiAgICAgIGlmICghbWVyZ2VkQ29uZmlnKSByZXR1cm4gJyc7CiAgICAgIGNvbnN0IHsKICAgICAgICB2YWx1ZSwKICAgICAgICBmb3JtYXR0ZXIKICAgICAgfSA9IG1lcmdlZENvbmZpZzsKICAgICAgcmV0dXJuIGZvcm1hdHRlci5yZXBsYWNlKCd7dmFsdWV9JywgdmFsdWUpOwogICAgfQogIH0sCiAgd2F0Y2g6IHsKICAgIGNvbmZpZygpIHsKICAgICAgY29uc3QgewogICAgICAgIG1lcmdlQ29uZmlnCiAgICAgIH0gPSB0aGlzOwogICAgICBtZXJnZUNvbmZpZygpOwogICAgfQogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgaW5pdCgpIHsKICAgICAgY29uc3QgewogICAgICAgIGluaXRXSCwKICAgICAgICBjb25maWcsCiAgICAgICAgbWVyZ2VDb25maWcKICAgICAgfSA9IHRoaXM7CiAgICAgIGF3YWl0IGluaXRXSCgpOwogICAgICBpZiAoIWNvbmZpZykgcmV0dXJuOwogICAgICBtZXJnZUNvbmZpZygpOwogICAgfSwKICAgIGFzeW5jIGluaXRXSCgpIHsKICAgICAgY29uc3QgewogICAgICAgICRuZXh0VGljaywKICAgICAgICAkcmVmcwogICAgICB9ID0gdGhpczsKICAgICAgYXdhaXQgJG5leHRUaWNrKCk7CiAgICAgIGNvbnN0IHsKICAgICAgICBjbGllbnRXaWR0aCwKICAgICAgICBjbGllbnRIZWlnaHQKICAgICAgfSA9ICRyZWZzWydwZXJjZW50LXBvbmQnXTsKICAgICAgdGhpcy53aWR0aCA9IGNsaWVudFdpZHRoOwogICAgICB0aGlzLmhlaWdodCA9IGNsaWVudEhlaWdodDsKICAgIH0sCiAgICBtZXJnZUNvbmZpZygpIHsKICAgICAgY29uc3QgewogICAgICAgIGNvbmZpZywKICAgICAgICBkZWZhdWx0Q29uZmlnCiAgICAgIH0gPSB0aGlzOwogICAgICB0aGlzLm1lcmdlZENvbmZpZyA9IGRlZXBNZXJnZShkZWVwQ2xvbmUoZGVmYXVsdENvbmZpZywgdHJ1ZSksIGNvbmZpZyB8fCB7fSk7CiAgICB9CiAgfSwKICBtb3VudGVkKCkgewogICAgY29uc3QgewogICAgICBpbml0CiAgICB9ID0gdGhpczsKICAgIGluaXQoKTsKICB9Cn07"},{"version":3,"names":["uuid","deepMerge","deepClone","name","props","config","type","Object","default","data","id","gradientId1","gradientId2","width","height","defaultConfig","value","colors","borderWidth","borderGap","lineDash","textColor","borderRadius","localGradient","formatter","mergedConfig","computed","rectWidth","rectHeight","points","halfHeight","polylineLength","polylineWidth","linearGradient","colorNum","length","colorOffsetGap","map","c","i","polylineGradient","gradient2XPos","details","replace","watch","mergeConfig","methods","init","initWH","$nextTick","$refs","clientWidth","clientHeight","mounted"],"sources":["node_modules/@jiaminghi/data-view/lib/components/percentPond/src/main.vue"],"sourcesContent":["<template>\n  <div class=\"dv-percent-pond\" ref=\"percent-pond\">\n    <svg>\n      <defs>\n        <linearGradient :id=\"gradientId1\" x1=\"0%\" y1=\"0%\" x2=\"100%\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n\n        <linearGradient :id=\"gradientId2\" x1=\"0%\" y1=\"0%\" :x2=\"gradient2XPos\" y2=\"0%\">\n          <stop v-for=\"lc in linearGradient\" :key=\"lc[0]\"\n            :offset=\"`${lc[0]}%`\"\n            :stop-color=\"lc[1]\" />\n        </linearGradient>\n      </defs>\n      <rect\n        :x=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :y=\"mergedConfig ? mergedConfig.borderWidth / 2 : '0'\"\n        :rx=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        :ry=\"mergedConfig ? mergedConfig.borderRadius : '0'\"\n        fill=\"transparent\"\n        :stroke-width=\"mergedConfig ? mergedConfig.borderWidth : '0'\"\n        :stroke=\"`url(#${gradientId1})`\"\n        :width=\"rectWidth > 0 ? rectWidth : 0\"\n        :height=\"rectHeight > 0 ? rectHeight : 0\"\n      />\n      <polyline\n        :stroke-width=\"polylineWidth\"\n        :stroke-dasharray=\"mergedConfig ? mergedConfig.lineDash.join(',') : '0'\"\n        :stroke=\"`url(#${polylineGradient})`\"\n        :points=\"points\"\n      />\n      <text\n        :stroke=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :fill=\"mergedConfig ? mergedConfig.textColor : '#fff'\"\n        :x=\"width / 2\"\n        :y=\"height / 2\"\n      >\n        {{ details }}\n      </text>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport { uuid } from '../../../util/index'\n\nimport { deepMerge } from '@jiaminghi/charts/lib/util/index'\n\nimport { deepClone } from '@jiaminghi/c-render/lib/plugin/util'\n\nexport default {\n  name: 'DvPercentPond',\n  props: {\n    config: {\n      type: Object,\n      default: () => ({})\n    }\n  },\n  data () {\n    const id = uuid()\n    return {\n      gradientId1: `percent-pond-gradientId1-${id}`,\n      gradientId2: `percent-pond-gradientId2-${id}`,\n\n      width: 0,\n      height: 0,\n\n      defaultConfig: {\n        /**\n         * @description Value\n         * @type {Number}\n         * @default value = 0\n         */\n        value: 0,\n        /**\n         * @description Colors (hex|rgb|rgba|color keywords)\n         * @type {Array<String>}\n         * @default colors = ['#00BAFF', '#3DE7C9']\n         * @example colors = ['#000', 'rgb(0, 0, 0)', 'rgba(0, 0, 0, 1)', 'red']\n         */\n        colors: ['#3DE7C9', '#00BAFF'],\n        /**\n         * @description Border width\n         * @type {Number}\n         * @default borderWidth = 3\n         */\n        borderWidth: 3,\n        /**\n         * @description Gap between border and pond\n         * @type {Number}\n         * @default borderGap = 3\n         */\n        borderGap: 3,\n        /**\n         * @description Line dash\n         * @type {Array<Number>}\n         * @default lineDash = [5, 1]\n         */\n        lineDash: [5, 1],\n        /**\n         * @description Text color\n         * @type {String}\n         * @default textColor = '#fff'\n         */\n        textColor: '#fff',\n        /**\n         * @description Border radius\n         * @type {Number}\n         * @default borderRadius = 5\n         */\n        borderRadius: 5,\n        /**\n         * @description Local Gradient\n         * @type {Boolean}\n         * @default localGradient = false\n         * @example localGradient = false | true\n         */\n        localGradient: false,\n        /**\n         * @description Formatter\n         * @type {String}\n         * @default formatter = '{value}%'\n         */\n        formatter: '{value}%'\n      },\n\n      mergedConfig: null\n    }\n  },\n  computed: {\n    rectWidth () {\n      const { mergedConfig, width } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return width - borderWidth\n    },\n    rectHeight () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth } = mergedConfig\n\n      return height - borderWidth\n    },\n    points () {\n      const { mergedConfig, width, height } = this\n\n      const halfHeight = height / 2\n\n      if (!mergedConfig) return `0, ${halfHeight} 0, ${halfHeight}`\n\n      const { borderWidth, borderGap, value } = mergedConfig\n\n      const polylineLength = (width - (borderWidth + borderGap) * 2) / 100 * value\n\n      return `\n        ${borderWidth + borderGap}, ${halfHeight}\n        ${borderWidth + borderGap + polylineLength}, ${halfHeight + 0.001}\n      `\n    },\n    polylineWidth () {\n      const { mergedConfig, height } = this\n\n      if (!mergedConfig) return 0\n\n      const { borderWidth, borderGap } = mergedConfig\n\n      return height - (borderWidth + borderGap) * 2\n    },\n    linearGradient () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return []\n\n      const { colors } = mergedConfig\n\n      const colorNum = colors.length\n\n      const colorOffsetGap = 100 / (colorNum - 1)\n\n      return colors.map((c, i) => [colorOffsetGap * i, c])\n    },\n    polylineGradient () {\n      const { gradientId1, gradientId2, mergedConfig } = this\n\n      if (!mergedConfig) return gradientId2\n\n      if (mergedConfig.localGradient) return gradientId1\n\n      return gradientId2\n    },\n    gradient2XPos () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return '100%'\n\n      const { value } = mergedConfig\n\n      return `${200 - value}%`\n    },\n    details () {\n      const { mergedConfig } = this\n\n      if (!mergedConfig) return ''\n\n      const { value, formatter } = mergedConfig\n\n      return formatter.replace('{value}', value)\n    }\n  },\n  watch: {\n    config () {\n      const { mergeConfig } = this\n\n      mergeConfig()\n    }\n  },\n  methods: {\n    async init () {\n      const { initWH, config, mergeConfig } = this\n\n      await initWH()\n\n      if (!config) return\n\n      mergeConfig()\n    },\n    async initWH () {\n      const { $nextTick, $refs } = this\n\n      await $nextTick()\n\n      const { clientWidth, clientHeight } = $refs['percent-pond']\n\n      this.width = clientWidth\n      this.height = clientHeight\n    },\n    mergeConfig () {\n      const { config, defaultConfig } = this\n\n      this.mergedConfig = deepMerge(deepClone(defaultConfig, true), config || {})\n    }\n  },\n  mounted () {\n    const { init } = this\n\n    init()\n  }\n}\n</script>"],"mappings":";AA8CA,SAAAA,IAAA;AAEA,SAAAC,SAAA;AAEA,SAAAC,SAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACAC,MAAA;MACAC,IAAA,EAAAC,MAAA;MACAC,OAAA,EAAAA,CAAA;IACA;EACA;EACAC,KAAA;IACA,MAAAC,EAAA,GAAAV,IAAA;IACA;MACAW,WAAA,8BAAAD,EAAA;MACAE,WAAA,8BAAAF,EAAA;MAEAG,KAAA;MACAC,MAAA;MAEAC,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,KAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,MAAA;QACA;AACA;AACA;AACA;AACA;QACAC,WAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;QACA;AACA;AACA;AACA;AACA;QACAC,QAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;QACA;AACA;AACA;AACA;AACA;QACAC,YAAA;QACA;AACA;AACA;AACA;AACA;AACA;QACAC,aAAA;QACA;AACA;AACA;AACA;AACA;QACAC,SAAA;MACA;MAEAC,YAAA;IACA;EACA;EACAC,QAAA;IACAC,UAAA;MACA;QAAAF,YAAA;QAAAZ;MAAA;MAEA,KAAAY,YAAA;MAEA;QAAAP;MAAA,IAAAO,YAAA;MAEA,OAAAZ,KAAA,GAAAK,WAAA;IACA;IACAU,WAAA;MACA;QAAAH,YAAA;QAAAX;MAAA;MAEA,KAAAW,YAAA;MAEA;QAAAP;MAAA,IAAAO,YAAA;MAEA,OAAAX,MAAA,GAAAI,WAAA;IACA;IACAW,OAAA;MACA;QAAAJ,YAAA;QAAAZ,KAAA;QAAAC;MAAA;MAEA,MAAAgB,UAAA,GAAAhB,MAAA;MAEA,KAAAW,YAAA,eAAAK,UAAA,OAAAA,UAAA;MAEA;QAAAZ,WAAA;QAAAC,SAAA;QAAAH;MAAA,IAAAS,YAAA;MAEA,MAAAM,cAAA,IAAAlB,KAAA,IAAAK,WAAA,GAAAC,SAAA,eAAAH,KAAA;MAEA;AACA,UAAAE,WAAA,GAAAC,SAAA,KAAAW,UAAA;AACA,UAAAZ,WAAA,GAAAC,SAAA,GAAAY,cAAA,KAAAD,UAAA;AACA;IACA;IACAE,cAAA;MACA;QAAAP,YAAA;QAAAX;MAAA;MAEA,KAAAW,YAAA;MAEA;QAAAP,WAAA;QAAAC;MAAA,IAAAM,YAAA;MAEA,OAAAX,MAAA,IAAAI,WAAA,GAAAC,SAAA;IACA;IACAc,eAAA;MACA;QAAAR;MAAA;MAEA,KAAAA,YAAA;MAEA;QAAAR;MAAA,IAAAQ,YAAA;MAEA,MAAAS,QAAA,GAAAjB,MAAA,CAAAkB,MAAA;MAEA,MAAAC,cAAA,UAAAF,QAAA;MAEA,OAAAjB,MAAA,CAAAoB,GAAA,EAAAC,CAAA,EAAAC,CAAA,MAAAH,cAAA,GAAAG,CAAA,EAAAD,CAAA;IACA;IACAE,iBAAA;MACA;QAAA7B,WAAA;QAAAC,WAAA;QAAAa;MAAA;MAEA,KAAAA,YAAA,SAAAb,WAAA;MAEA,IAAAa,YAAA,CAAAF,aAAA,SAAAZ,WAAA;MAEA,OAAAC,WAAA;IACA;IACA6B,cAAA;MACA;QAAAhB;MAAA;MAEA,KAAAA,YAAA;MAEA;QAAAT;MAAA,IAAAS,YAAA;MAEA,gBAAAT,KAAA;IACA;IACA0B,QAAA;MACA;QAAAjB;MAAA;MAEA,KAAAA,YAAA;MAEA;QAAAT,KAAA;QAAAQ;MAAA,IAAAC,YAAA;MAEA,OAAAD,SAAA,CAAAmB,OAAA,YAAA3B,KAAA;IACA;EACA;EACA4B,KAAA;IACAvC,OAAA;MACA;QAAAwC;MAAA;MAEAA,WAAA;IACA;EACA;EACAC,OAAA;IACA,MAAAC,KAAA;MACA;QAAAC,MAAA;QAAA3C,MAAA;QAAAwC;MAAA;MAEA,MAAAG,MAAA;MAEA,KAAA3C,MAAA;MAEAwC,WAAA;IACA;IACA,MAAAG,OAAA;MACA;QAAAC,SAAA;QAAAC;MAAA;MAEA,MAAAD,SAAA;MAEA;QAAAE,WAAA;QAAAC;MAAA,IAAAF,KAAA;MAEA,KAAArC,KAAA,GAAAsC,WAAA;MACA,KAAArC,MAAA,GAAAsC,YAAA;IACA;IACAP,YAAA;MACA;QAAAxC,MAAA;QAAAU;MAAA;MAEA,KAAAU,YAAA,GAAAxB,SAAA,CAAAC,SAAA,CAAAa,aAAA,SAAAV,MAAA;IACA;EACA;EACAgD,QAAA;IACA;MAAAN;IAAA;IAEAA,IAAA;EACA;AACA","ignoreList":[]}]}