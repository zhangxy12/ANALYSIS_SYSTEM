{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\information_extraction.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\information_extraction.vue","mtime":1740884086085},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\babel.config.js","mtime":1732591727371},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\thread-loader\\dist\\cjs.js","mtime":1733210776367},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuYXJyYXkucHVzaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5jb25zdHJ1Y3Rvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzbmV4dC5pdGVyYXRvci5mb3ItZWFjaC5qcyI7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiaW5mb3JtYXRpb25fZXh0cmFjdGlvbiIsCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHRpbWVyOiAiIiwKICAgICAgbXlDaGFydDogIiIsCiAgICAgIGluZm9ybWF0aW9uX2V4dHJhY3Rpb25fZGF0YTogewogICAgICAgIHRyaXBsZXM6IFtdIC8vIOWtmOWCqOaPkOWPlueahOS4ieWFg+e7hAogICAgICB9CiAgICB9OwogIH0sCiAgbWV0aG9kczogewogICAgZ2V0SW5mb3JtYXRpb25FeHRyYWN0aW9uKCkgewogICAgICBsZXQgcXVlcnkgPSB0aGlzLiRyb3V0ZS5xdWVyeTsKICAgICAgdGhpcy4kYXhpb3MuZ2V0KCJjb21tZW50L2tub3dsZWRnZV9ncmFwaD90YWdfdGFza19pZD0iICsgcXVlcnkudGFnX3Rhc2tfaWQgKyAiJndlaWJvX2lkPSIgKyBxdWVyeS53ZWlib19pZCkudGhlbihyZXMgPT4gewogICAgICAgIHRoaXMuaW5mb3JtYXRpb25fZXh0cmFjdGlvbl9kYXRhID0gcmVzLmRhdGEuZGF0YTsKICAgICAgICBjb25zb2xlLmxvZyhyZXMuZGF0YS5kYXRhKTsKICAgICAgICB0aGlzLm15SW5mb3JtYXRpb25FeHRyYWN0aW9uKCk7IC8vIOiwg+eUqOe7mOWbvuaWueazlQogICAgICB9KTsKICAgIH0sCiAgICAvLyDnu5jliLbnn6Xor4blm77osLHlm77ooagKICAgIG15SW5mb3JtYXRpb25FeHRyYWN0aW9uKCkgewogICAgICBsZXQgb3B0aW9uOwogICAgICBpZiAodGhpcy5teUNoYXJ0ICE9IG51bGwgJiYgdGhpcy5teUNoYXJ0ICE9PSAiIiAmJiB0aGlzLm15Q2hhcnQgIT09IHVuZGVmaW5lZCkgewogICAgICAgIHRoaXMubXlDaGFydC5kaXNwb3NlKCk7IC8vIOa4heeQhueOsOacieeahOWbvuihqOWunuS+iwogICAgICB9CgogICAgICAvLyDln7rkuo7lh4blpIflpb3nmoRkb23vvIzliJ3lp4vljJZlY2hhcnRz5a6e5L6LCiAgICAgIHRoaXMubXlDaGFydCA9IHRoaXMuJGVjaGFydHMuaW5pdChkb2N1bWVudC5nZXRFbGVtZW50QnlJZCgiaW5mb3JtYXRpb25fZXh0cmFjdGlvbiIpKTsKCiAgICAgIC8vIOiOt+WPluS4ieWFg+e7hOaVsOaNrgogICAgICBjb25zdCB0cmlwbGVzID0gdGhpcy5pbmZvcm1hdGlvbl9leHRyYWN0aW9uX2RhdGE7CgogICAgICAvLyDnlKjkuo7lrZjlgqjoioLngrnlkozovrkKICAgICAgY29uc3Qgbm9kZXMgPSBbXTsKICAgICAgY29uc3QgbGlua3MgPSBbXTsKICAgICAgY29uc3Qgbm9kZUlkcyA9IHt9OyAvLyDnlKjkuo7orrDlvZXlt7LlrZjlnKjnmoToioLngrkKCiAgICAgIC8vIOmBjeWOhuS4ieWFg+e7hOaVsOaNruW5tuWkhOeQhuavj+S4quS4ieWFg+e7hAogICAgICB0cmlwbGVzLmZvckVhY2goKHRyaXBsZSwgaW5kZXgpID0+IHsKICAgICAgICAvLyDlpoLmnpxzdWJqZWN044CBcHJlZGljYXRl44CBb2JqZWN05piv5pWw57uE77yM5aSE55CG5q+P5Liq5YWD57SgCiAgICAgICAgY29uc3Qgc3ViamVjdHMgPSBBcnJheS5pc0FycmF5KHRyaXBsZS5zdWJqZWN0KSA/IHRyaXBsZS5zdWJqZWN0IDogW3RyaXBsZS5zdWJqZWN0XTsKICAgICAgICBjb25zdCBwcmVkaWNhdGVzID0gQXJyYXkuaXNBcnJheSh0cmlwbGUucHJlZGljYXRlKSA/IHRyaXBsZS5wcmVkaWNhdGUgOiBbdHJpcGxlLnByZWRpY2F0ZV07CiAgICAgICAgY29uc3Qgb2JqZWN0cyA9IEFycmF5LmlzQXJyYXkodHJpcGxlLm9iamVjdCkgPyB0cmlwbGUub2JqZWN0IDogW3RyaXBsZS5vYmplY3RdOwogICAgICAgIHN1YmplY3RzLmZvckVhY2goc3ViamVjdCA9PiB7CiAgICAgICAgICBpZiAoIW5vZGVJZHNbc3ViamVjdF0pIHsKICAgICAgICAgICAgbm9kZUlkc1tzdWJqZWN0XSA9IG5vZGVzLmxlbmd0aDsKICAgICAgICAgICAgbm9kZXMucHVzaCh7CiAgICAgICAgICAgICAgaWQ6IHN1YmplY3QsCiAgICAgICAgICAgICAgbmFtZTogc3ViamVjdCwKICAgICAgICAgICAgICBjYXRlZ29yeTogMCwKICAgICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgICAgc2hvdzogdHJ1ZSwKICAgICAgICAgICAgICAgIHBvc2l0aW9uOiAiaW5zaWRlIiwKICAgICAgICAgICAgICAgIGZvcm1hdHRlcjogIntifSIsCiAgICAgICAgICAgICAgICBmb250U2l6ZTogMTQsCiAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmZmZmYnCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBpdGVtU3R5bGU6IHsKICAgICAgICAgICAgICAgIGNvbG9yOiB0aGlzLmdldFJhbmRvbUNvbG9yKCksCiAgICAgICAgICAgICAgICBvcGFjaXR5OiAwLjksCiAgICAgICAgICAgICAgICBib3JkZXJSYWRpdXM6ICc1MCUnLAogICAgICAgICAgICAgICAgYm9yZGVyQ29sb3I6ICcjZmZmZmZmJywKICAgICAgICAgICAgICAgIGJvcmRlcldpZHRoOiAyCiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICBzeW1ib2xTaXplOiA1MAogICAgICAgICAgICB9KTsKICAgICAgICAgIH0KICAgICAgICB9KTsKICAgICAgICBvYmplY3RzLmZvckVhY2gob2JqZWN0ID0+IHsKICAgICAgICAgIGlmICghbm9kZUlkc1tvYmplY3RdKSB7CiAgICAgICAgICAgIG5vZGVJZHNbb2JqZWN0XSA9IG5vZGVzLmxlbmd0aDsKICAgICAgICAgICAgbm9kZXMucHVzaCh7CiAgICAgICAgICAgICAgaWQ6IG9iamVjdCwKICAgICAgICAgICAgICBuYW1lOiBvYmplY3QsCiAgICAgICAgICAgICAgY2F0ZWdvcnk6IDIsCiAgICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICAgIHNob3c6IHRydWUsCiAgICAgICAgICAgICAgICBwb3NpdGlvbjogImluc2lkZSIsCiAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6ICJ7Yn0iLAogICAgICAgICAgICAgICAgZm9udFNpemU6IDE0LAogICAgICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogdGhpcy5nZXRSYW5kb21Db2xvcigpLAogICAgICAgICAgICAgICAgb3BhY2l0eTogMC45LAogICAgICAgICAgICAgICAgYm9yZGVyUmFkaXVzOiAnNTAlJywKICAgICAgICAgICAgICAgIGJvcmRlckNvbG9yOiAnI2ZmZmZmZicsCiAgICAgICAgICAgICAgICBib3JkZXJXaWR0aDogMgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgc3ltYm9sU2l6ZTogNTAKICAgICAgICAgICAgfSk7CiAgICAgICAgICB9CiAgICAgICAgfSk7CgogICAgICAgIC8vIOWIm+W7uui+uei/nuaOpXN1YmplY3TlkoxvYmplY3TvvIzovrnkuIrmoIfms6hwcmVkaWNhdGUKICAgICAgICBzdWJqZWN0cy5mb3JFYWNoKHN1YmplY3QgPT4gewogICAgICAgICAgcHJlZGljYXRlcy5mb3JFYWNoKHByZWRpY2F0ZSA9PiB7CiAgICAgICAgICAgIG9iamVjdHMuZm9yRWFjaChvYmplY3QgPT4gewogICAgICAgICAgICAgIGxpbmtzLnB1c2goewogICAgICAgICAgICAgICAgc291cmNlOiBzdWJqZWN0LAogICAgICAgICAgICAgICAgdGFyZ2V0OiBvYmplY3QsCiAgICAgICAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICAgICAgICBmb3JtYXR0ZXI6IHByZWRpY2F0ZSwKICAgICAgICAgICAgICAgICAgLy8g5pi+56S6cHJlZGljYXRl5L2c5Li66L6555qEbGFiZWwKICAgICAgICAgICAgICAgICAgZm9udFNpemU6IDEyLAogICAgICAgICAgICAgICAgICBjb2xvcjogJyNmZmZmZmYnCiAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgbGluZVN0eWxlOiB7CiAgICAgICAgICAgICAgICAgIGNvbG9yOiAiI2FhYSIsCiAgICAgICAgICAgICAgICAgIHdpZHRoOiAxLAogICAgICAgICAgICAgICAgICBjdXJ2ZW5lc3M6IDAuMwogICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgIH0pOwogICAgICAgICAgICB9KTsKICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKCiAgICAgIC8vIOWbvuihqOeahOmFjee9rumhuQogICAgICBvcHRpb24gPSB7CiAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgc2hvdzogdHJ1ZQogICAgICAgIH0sCiAgICAgICAgYW5pbWF0aW9uOiB0cnVlLAogICAgICAgIHNlcmllczogW3sKICAgICAgICAgIHR5cGU6ICJncmFwaCIsCiAgICAgICAgICBsYXlvdXQ6ICJmb3JjZSIsCiAgICAgICAgICByb2FtOiB0cnVlLAogICAgICAgICAgc3ltYm9sU2l6ZTogNTAsCiAgICAgICAgICBsYWJlbDogewogICAgICAgICAgICBzaG93OiB0cnVlLAogICAgICAgICAgICBwb3NpdGlvbjogImluc2lkZSIsCiAgICAgICAgICAgIGZvcm1hdHRlcjogIntifSIsCiAgICAgICAgICAgIGZvbnRTaXplOiAxNCwKICAgICAgICAgICAgY29sb3I6ICcjZmZmZmZmJwogICAgICAgICAgfSwKICAgICAgICAgIGVkZ2VTeW1ib2w6IFsibm9uZSIsICJhcnJvdyJdLAogICAgICAgICAgZWRnZVN5bWJvbFNpemU6IFs0LCAxMF0sCiAgICAgICAgICBmb3JjZTogewogICAgICAgICAgICByZXB1bHNpb246IDIwMCwKICAgICAgICAgICAgZWRnZUxlbmd0aDogMTUwCiAgICAgICAgICB9LAogICAgICAgICAgZGF0YTogbm9kZXMsCiAgICAgICAgICBsaW5rczogbGlua3MsCiAgICAgICAgICBjYXRlZ29yaWVzOiBbewogICAgICAgICAgICBuYW1lOiAiRW50aXR5IgogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiAiUHJlZGljYXRlIgogICAgICAgICAgfSwgewogICAgICAgICAgICBuYW1lOiAiT2JqZWN0IgogICAgICAgICAgfV0sCiAgICAgICAgICBlbXBoYXNpczogewogICAgICAgICAgICBmb2N1czogImFkamFjZW5jeSIKICAgICAgICAgIH0sCiAgICAgICAgICBsaW5lU3R5bGU6IHsKICAgICAgICAgICAgY29sb3I6ICIjYWFhIiwKICAgICAgICAgICAgd2lkdGg6IDEsCiAgICAgICAgICAgIGN1cnZlbmVzczogMC4zCiAgICAgICAgICB9CiAgICAgICAgfV0KICAgICAgfTsKICAgICAgdGhpcy5teUNoYXJ0LnNldE9wdGlvbihvcHRpb24pOwogICAgfSwKICAgIC8vIOmaj+acuuminOiJsueUn+aIkOWHveaVsO+8iOa1heiJsuezu++8iQogICAgZ2V0UmFuZG9tQ29sb3IoKSB7CiAgICAgIGNvbnN0IGxldHRlcnMgPSAnODlBQkNERUYnOwogICAgICBsZXQgY29sb3IgPSAnIyc7CiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgNjsgaSsrKSB7CiAgICAgICAgY29sb3IgKz0gbGV0dGVyc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiA2KV07CiAgICAgIH0KICAgICAgcmV0dXJuIGNvbG9yOwogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIHRoaXMuZ2V0SW5mb3JtYXRpb25FeHRyYWN0aW9uKCk7CiAgICB0aGlzLnRpbWVyID0gc2V0SW50ZXJ2YWwoKCkgPT4gewogICAgICB0aGlzLm15SW5mb3JtYXRpb25FeHRyYWN0aW9uKCk7IC8vIOavjzXnp5Lmm7TmlrDlm77ooagKICAgIH0sIDIwMDAwKTsgLy8g5a6a5pe25pu05paw5Zu+6KGoCiAgfSwKICBiZWZvcmVEZXN0cm95KCkgewogICAgY2xlYXJJbnRlcnZhbCh0aGlzLnRpbWVyKTsKICAgIHRoaXMudGltZXIgPSBudWxsOwogIH0KfTs="},{"version":3,"names":["name","data","timer","myChart","information_extraction_data","triples","methods","getInformationExtraction","query","$route","$axios","get","tag_task_id","weibo_id","then","res","console","log","myInformationExtraction","option","undefined","dispose","$echarts","init","document","getElementById","nodes","links","nodeIds","forEach","triple","index","subjects","Array","isArray","subject","predicates","predicate","objects","object","length","push","id","category","label","show","position","formatter","fontSize","color","itemStyle","getRandomColor","opacity","borderRadius","borderColor","borderWidth","symbolSize","source","target","lineStyle","width","curveness","tooltip","animation","series","type","layout","roam","edgeSymbol","edgeSymbolSize","force","repulsion","edgeLength","categories","emphasis","focus","setOption","letters","i","Math","floor","random","mounted","setInterval","beforeDestroy","clearInterval"],"sources":["src/components/blog_detail/information_extraction.vue"],"sourcesContent":["<template>\r\n  <div class=\"information_extraction\">\r\n    <div class=\"information_extraction_title\">信息抽取</div>\r\n    <div id=\"information_extraction\" style=\"height: 80%;\"></div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"information_extraction\",\r\n  data() {\r\n    return {\r\n      timer: \"\",\r\n      myChart: \"\",\r\n      information_extraction_data: {\r\n        triples: [], // 存储提取的三元组\r\n      },\r\n    };\r\n  },\r\n  methods: {\r\n    getInformationExtraction() {\r\n      let query = this.$route.query;\r\n      this.$axios\r\n        .get(\r\n          \"comment/knowledge_graph?tag_task_id=\" +\r\n            query.tag_task_id +\r\n            \"&weibo_id=\" +\r\n            query.weibo_id\r\n        )\r\n        .then((res) => {\r\n          this.information_extraction_data = res.data.data;\r\n          console.log(res.data.data);\r\n          this.myInformationExtraction(); // 调用绘图方法\r\n        });\r\n    },\r\n\r\n    // 绘制知识图谱图表\r\n    myInformationExtraction() {\r\n      let option;\r\n\r\n      if (this.myChart != null && this.myChart !== \"\" && this.myChart !== undefined) {\r\n        this.myChart.dispose(); // 清理现有的图表实例\r\n      }\r\n\r\n      // 基于准备好的dom，初始化echarts实例\r\n      this.myChart = this.$echarts.init(document.getElementById(\"information_extraction\"));\r\n\r\n      // 获取三元组数据\r\n      const triples = this.information_extraction_data;\r\n\r\n      // 用于存储节点和边\r\n      const nodes = [];\r\n      const links = [];\r\n      const nodeIds = {}; // 用于记录已存在的节点\r\n\r\n      // 遍历三元组数据并处理每个三元组\r\n      triples.forEach((triple, index) => {\r\n        // 如果subject、predicate、object是数组，处理每个元素\r\n        const subjects = Array.isArray(triple.subject) ? triple.subject : [triple.subject];\r\n        const predicates = Array.isArray(triple.predicate) ? triple.predicate : [triple.predicate];\r\n        const objects = Array.isArray(triple.object) ? triple.object : [triple.object];\r\n\r\n        subjects.forEach(subject => {\r\n          if (!nodeIds[subject]) {\r\n            nodeIds[subject] = nodes.length;\r\n            nodes.push({\r\n              id: subject,\r\n              name: subject,\r\n              category: 0,\r\n              label: {\r\n                show: true,\r\n                position: \"inside\",\r\n                formatter: \"{b}\",\r\n                fontSize: 14,\r\n                color: '#ffffff',\r\n              },\r\n              itemStyle: {\r\n                color: this.getRandomColor(),\r\n                opacity: 0.9,\r\n                borderRadius: '50%',\r\n                borderColor: '#ffffff',\r\n                borderWidth: 2,\r\n              },\r\n              symbolSize: 50,\r\n            });\r\n          }\r\n        });\r\n\r\n        objects.forEach(object => {\r\n          if (!nodeIds[object]) {\r\n            nodeIds[object] = nodes.length;\r\n            nodes.push({\r\n              id: object,\r\n              name: object,\r\n              category: 2,\r\n              label: {\r\n                show: true,\r\n                position: \"inside\",\r\n                formatter: \"{b}\",\r\n                fontSize: 14,\r\n                color: '#ffffff',\r\n              },\r\n              itemStyle: {\r\n                color: this.getRandomColor(),\r\n                opacity: 0.9,\r\n                borderRadius: '50%',\r\n                borderColor: '#ffffff',\r\n                borderWidth: 2,\r\n              },\r\n              symbolSize: 50,\r\n            });\r\n          }\r\n        });\r\n\r\n        // 创建边连接subject和object，边上标注predicate\r\n        subjects.forEach(subject => {\r\n          predicates.forEach(predicate => {\r\n            objects.forEach(object => {\r\n              links.push({\r\n                source: subject,\r\n                target: object,\r\n                label: {\r\n                  show: true,\r\n                  formatter: predicate, // 显示predicate作为边的label\r\n                  fontSize: 12,\r\n                  color: '#ffffff',\r\n                },\r\n                lineStyle: {\r\n                  color: \"#aaa\",\r\n                  width: 1,\r\n                  curveness: 0.3,\r\n                },\r\n              });\r\n            });\r\n          });\r\n        });\r\n      });\r\n\r\n      // 图表的配置项\r\n      option = {\r\n        tooltip: {\r\n          show: true,\r\n        },\r\n        animation: true,\r\n        series: [\r\n          {\r\n            type: \"graph\",\r\n            layout: \"force\",\r\n            roam: true,\r\n            symbolSize: 50,\r\n            label: {\r\n              show: true,\r\n              position: \"inside\",\r\n              formatter: \"{b}\",\r\n              fontSize: 14,\r\n              color: '#ffffff',\r\n            },\r\n            edgeSymbol: [\"none\", \"arrow\"],\r\n            edgeSymbolSize: [4, 10],\r\n            force: {\r\n              repulsion: 200,\r\n              edgeLength: 150,\r\n            },\r\n            data: nodes,\r\n            links: links,\r\n            categories: [\r\n              { name: \"Entity\" },\r\n              { name: \"Predicate\" },\r\n              { name: \"Object\" },\r\n            ],\r\n            emphasis: {\r\n              focus: \"adjacency\",\r\n            },\r\n            lineStyle: {\r\n              color: \"#aaa\",\r\n              width: 1,\r\n              curveness: 0.3,\r\n            },\r\n          },\r\n        ],\r\n      };\r\n\r\n      this.myChart.setOption(option);\r\n    },\r\n\r\n    // 随机颜色生成函数（浅色系）\r\n    getRandomColor() {\r\n      const letters = '89ABCDEF';\r\n      let color = '#';\r\n      for (let i = 0; i < 6; i++) {\r\n        color += letters[Math.floor(Math.random() * 6)];\r\n      }\r\n      return color;\r\n    }\r\n  },\r\n\r\n  mounted() {\r\n    this.getInformationExtraction();\r\n    this.timer = setInterval(() => {\r\n      this.myInformationExtraction(); // 每5秒更新图表\r\n    }, 20000); // 定时更新图表\r\n  },\r\n\r\n  beforeDestroy() {\r\n    clearInterval(this.timer);\r\n    this.timer = null;\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.information_extraction {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n  top: 5%;\r\n  background-color: #ffffff00;\r\n  color: #ffff;\r\n  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1); /* 添加阴影效果 */\r\n  border: 2px solid #669ef3a5; /* 深色边框 */\r\n  border-radius: 10px;\r\n  box-sizing: border-box;\r\n  backdrop-filter: blur(10px); /* 添加磨砂玻璃效果 */\r\n  -webkit-backdrop-filter: blur(10px); /* Safari 兼容 */\r\n  overflow: hidden;\r\n}\r\n\r\n.information_extraction_title {\r\n  margin: 10px 20px;\r\n  padding: 5px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n}\r\n\r\n#information_extraction {\r\n  position: relative;\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"],"mappings":"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","ignoreList":[]}]}