{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\Rumor\\Wordcloud.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\Rumor\\Wordcloud.vue","mtime":1741770935246},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\babel.config.js","mtime":1732591727371},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLm1hcC5qcyI7CmltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7CmltcG9ydCAqIGFzIGVjaGFydHMgZnJvbSAnZWNoYXJ0cyc7CmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAnV29yZENsb3VkJywKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgd29yZGNsb3VkRGF0YTogW10sCiAgICAgIGxvYWRpbmc6IGZhbHNlLAogICAgICBlcnJvcjogbnVsbAogICAgfTsKICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLmZldGNoV29yZGNsb3VkRGF0YSgpOwogIH0sCiAgbWV0aG9kczogewogICAgYXN5bmMgZmV0Y2hXb3JkY2xvdWREYXRhKCkgewogICAgICB0aGlzLmxvYWRpbmcgPSB0cnVlOwogICAgICB0cnkgewogICAgICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgYXhpb3MuZ2V0KCcvcnVtb3IvcnVtb3Jfd29yZCcpOwogICAgICAgIGlmIChyZXNwb25zZS5kYXRhLmNvZGUgPT09IDApIHsKICAgICAgICAgIHRoaXMud29yZGNsb3VkRGF0YSA9IHJlc3BvbnNlLmRhdGEuZGF0YS53b3JkY2xvdWRfZGF0YTsKICAgICAgICAgIGNvbnNvbGUubG9nKHRoaXMud29yZGNsb3VkRGF0YSk7CiAgICAgICAgICB0aGlzLnJlbmRlcldvcmRjbG91ZCgpOwogICAgICAgIH0gZWxzZSB7CiAgICAgICAgICB0aGlzLmVycm9yID0gcmVzcG9uc2UuZGF0YS5tZXNzYWdlOwogICAgICAgIH0KICAgICAgfSBjYXRjaCAoZXJyb3IpIHsKICAgICAgICB0aGlzLmVycm9yID0gJ+ivt+axguWHuumUme+8micgKyBlcnJvci5tZXNzYWdlOwogICAgICB9IGZpbmFsbHkgewogICAgICAgIHRoaXMubG9hZGluZyA9IGZhbHNlOwogICAgICB9CiAgICB9LAogICAgcmVuZGVyV29yZGNsb3VkKCkgewogICAgICBjb25zdCBjaGFydERvbSA9IHRoaXMuJHJlZnMud29yZGNsb3VkOwogICAgICBjb25zdCBteUNoYXJ0ID0gZWNoYXJ0cy5pbml0KGNoYXJ0RG9tKTsKICAgICAgY29uc3Qgb3B0aW9uID0gewogICAgICAgIHNlcmllczogW3sKICAgICAgICAgIHR5cGU6ICd3b3JkQ2xvdWQnLAogICAgICAgICAgd2lkdGg6ICc5MCUnLAogICAgICAgICAgaGVpZ2h0OiAnOTAlJywKICAgICAgICAgIHJpZ2h0OiAnY2VudGVyJywKICAgICAgICAgIGJvdHRvbTogJ2NlbnRlcicsCiAgICAgICAgICBzaGFwZTogJ2NpcmNsZScsCiAgICAgICAgICBzaXplUmFuZ2U6IFsxMiwgNjBdLAogICAgICAgICAgcm90YXRpb25SYW5nZTogWy05MCwgOTBdLAogICAgICAgICAgcm90YXRpb25TdGVwOiA0NSwKICAgICAgICAgIGdyaWRTaXplOiA4LAogICAgICAgICAgZHJhd091dE9mQm91bmQ6IGZhbHNlLAogICAgICAgICAgdGV4dFN0eWxlOiB7CiAgICAgICAgICAgIGNvbG9yOiBmdW5jdGlvbiAoKSB7CiAgICAgICAgICAgICAgLy8g6ZqP5py655Sf5oiQ6aKc6ImyCiAgICAgICAgICAgICAgcmV0dXJuICJyZ2IoIiArIFtNYXRoLnJvdW5kKE1hdGgucmFuZG9tKCkgKiA1NSArIDIwMCksCiAgICAgICAgICAgICAgLy8g57qi6Imy5YiG6YeP77yaMjAwIC0gMjU1CiAgICAgICAgICAgICAgTWF0aC5yb3VuZChNYXRoLnJhbmRvbSgpICogNTUgKyAyMDApLAogICAgICAgICAgICAgIC8vIOe7v+iJsuWIhumHj++8mjIwMCAtIDI1NQogICAgICAgICAgICAgIE1hdGgucm91bmQoTWF0aC5yYW5kb20oKSAqIDU1ICsgMjAwKSAvLyDok53oibLliIbph4/vvJoyMDAgLSAyNTUKICAgICAgICAgICAgICBdLmpvaW4oIiwiKSArICIpIjsKICAgICAgICAgICAgfSwKICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICBzaGFkb3dCbHVyOiAxMCwKICAgICAgICAgICAgICBzaGFkb3dDb2xvcjogJyMzMzMnCiAgICAgICAgICAgIH0KICAgICAgICAgIH0sCiAgICAgICAgICBkYXRhOiB0aGlzLndvcmRjbG91ZERhdGEubWFwKGl0ZW0gPT4gKHsKICAgICAgICAgICAgbmFtZTogaXRlbS5uYW1lLAogICAgICAgICAgICB2YWx1ZTogaXRlbS52YWx1ZQogICAgICAgICAgfSkpCiAgICAgICAgfV0KICAgICAgfTsKICAgICAgb3B0aW9uICYmIG15Q2hhcnQuc2V0T3B0aW9uKG9wdGlvbik7CiAgICB9CiAgfQp9Ow=="},{"version":3,"names":["axios","echarts","name","data","wordcloudData","loading","error","mounted","fetchWordcloudData","methods","response","get","code","wordcloud_data","console","log","renderWordcloud","message","chartDom","$refs","wordcloud","myChart","init","option","series","type","width","height","right","bottom","shape","sizeRange","rotationRange","rotationStep","gridSize","drawOutOfBound","textStyle","color","Math","round","random","join","emphasis","shadowBlur","shadowColor","map","item","value","setOption"],"sources":["src/components/Rumor/Wordcloud.vue"],"sourcesContent":["<template>\r\n    \r\n    <div class=\"wordcloud-container\">\r\n        <dv-border-box-7 :color = \"['LightSkyBlue','white']\">\r\n        <div ref=\"wordcloud\" style=\"width: 100%; height: 240px;\"></div>\r\n    </dv-border-box-7>\r\n    </div>\r\n\r\n</template>\r\n\r\n<script>\r\nimport axios from 'axios';\r\nimport * as echarts from 'echarts';\r\n\r\nexport default {\r\n    name: 'WordCloud',\r\n    data() {\r\n        return {\r\n            wordcloudData: [],\r\n            loading: false,\r\n            error: null\r\n        };\r\n    },\r\n    mounted() {\r\n        this.fetchWordcloudData();\r\n    },\r\n    methods: {\r\n        async fetchWordcloudData() {\r\n            this.loading = true;\r\n            try {\r\n                const response = await axios.get('/rumor/rumor_word');\r\n                if (response.data.code === 0) {\r\n                    this.wordcloudData = response.data.data.wordcloud_data;\r\n                    console.log(this.wordcloudData);\r\n                    this.renderWordcloud();\r\n                } else {\r\n                    this.error = response.data.message;\r\n                }\r\n            } catch (error) {\r\n                this.error = '请求出错：' + error.message;\r\n            } finally {\r\n                this.loading = false;\r\n            }\r\n        },\r\n        renderWordcloud() {\r\n            const chartDom = this.$refs.wordcloud;\r\n            const myChart = echarts.init(chartDom);\r\n\r\n            const option = {\r\n                series: [\r\n                    {\r\n                        type: 'wordCloud',\r\n                        width: '90%',\r\n                        height: '90%',\r\n                        right: 'center',\r\n                        bottom: 'center',\r\n                        shape: 'circle',\r\n                        sizeRange: [12, 60],\r\n                        rotationRange: [-90, 90],\r\n                        rotationStep: 45,\r\n                        gridSize: 8,\r\n                        drawOutOfBound: false,\r\n                        textStyle: {\r\n                            color: function () {\r\n                                // 随机生成颜色\r\n                                return \"rgb(\" +\r\n                                    [\r\n                                        Math.round(Math.random() * 55 + 200), // 红色分量：200 - 255\r\n                                        Math.round(Math.random() * 55 + 200), // 绿色分量：200 - 255\r\n                                        Math.round(Math.random() * 55 + 200), // 蓝色分量：200 - 255\r\n                                    ].join(\",\") + \")\";\r\n                            },\r\n                            emphasis: {\r\n                                shadowBlur: 10,\r\n                                shadowColor: '#333'\r\n                            }\r\n                        },\r\n                        data: this.wordcloudData.map(item => ({\r\n                            name: item.name,\r\n                            value: item.value\r\n                        }))\r\n                    }\r\n                ]\r\n            };\r\n\r\n            option && myChart.setOption(option);\r\n        }\r\n    }\r\n};\r\n</script>\r\n\r\n<style scoped>\r\n.wordcloud-container {\r\n    margin-top: 10px;\r\n}\r\n</style>"],"mappings":";AAWA,OAAAA,KAAA;AACA,YAAAC,OAAA;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,aAAA;MACAC,OAAA;MACAC,KAAA;IACA;EACA;EACAC,QAAA;IACA,KAAAC,kBAAA;EACA;EACAC,OAAA;IACA,MAAAD,mBAAA;MACA,KAAAH,OAAA;MACA;QACA,MAAAK,QAAA,SAAAV,KAAA,CAAAW,GAAA;QACA,IAAAD,QAAA,CAAAP,IAAA,CAAAS,IAAA;UACA,KAAAR,aAAA,GAAAM,QAAA,CAAAP,IAAA,CAAAA,IAAA,CAAAU,cAAA;UACAC,OAAA,CAAAC,GAAA,MAAAX,aAAA;UACA,KAAAY,eAAA;QACA;UACA,KAAAV,KAAA,GAAAI,QAAA,CAAAP,IAAA,CAAAc,OAAA;QACA;MACA,SAAAX,KAAA;QACA,KAAAA,KAAA,aAAAA,KAAA,CAAAW,OAAA;MACA;QACA,KAAAZ,OAAA;MACA;IACA;IACAW,gBAAA;MACA,MAAAE,QAAA,QAAAC,KAAA,CAAAC,SAAA;MACA,MAAAC,OAAA,GAAApB,OAAA,CAAAqB,IAAA,CAAAJ,QAAA;MAEA,MAAAK,MAAA;QACAC,MAAA,GACA;UACAC,IAAA;UACAC,KAAA;UACAC,MAAA;UACAC,KAAA;UACAC,MAAA;UACAC,KAAA;UACAC,SAAA;UACAC,aAAA;UACAC,YAAA;UACAC,QAAA;UACAC,cAAA;UACAC,SAAA;YACAC,KAAA,WAAAA,CAAA;cACA;cACA,gBACA,CACAC,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;cAAA;cACAF,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;cAAA;cACAF,IAAA,CAAAC,KAAA,CAAAD,IAAA,CAAAE,MAAA;cAAA,CACA,CAAAC,IAAA;YACA;YACAC,QAAA;cACAC,UAAA;cACAC,WAAA;YACA;UACA;UACAzC,IAAA,OAAAC,aAAA,CAAAyC,GAAA,CAAAC,IAAA;YACA5C,IAAA,EAAA4C,IAAA,CAAA5C,IAAA;YACA6C,KAAA,EAAAD,IAAA,CAAAC;UACA;QACA;MAEA;MAEAxB,MAAA,IAAAF,OAAA,CAAA2B,SAAA,CAAAzB,MAAA;IACA;EACA;AACA","ignoreList":[]}]}