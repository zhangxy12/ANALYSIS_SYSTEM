{"remainingRequest":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\propagate_tree.vue?vue&type=script&lang=js","dependencies":[{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\src\\components\\blog_detail\\propagate_tree.vue","mtime":1734750344936},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\babel.config.js","mtime":1732591727371},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\babel-loader\\lib\\index.js","mtime":1733210776030},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1733210776394},{"path":"D:\\dasanshang\\NLP\\1\\Topic_and_user_profile_analysis_system\\code\\front_end\\node_modules\\vue-loader\\lib\\index.js","mtime":1733210773580}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXNuZXh0Lml0ZXJhdG9yLm1hcC5qcyI7CmltcG9ydCBlY2hhcnRzIGZyb20gJ2VjaGFydHMnOwppbXBvcnQgJ2VjaGFydHMvbWFwL2pzL2NoaW5hJzsgLy8g5a+85YWl5Lit5Zu95Zyw5Zu+CgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogInByb3BhZ2F0ZV90cmVlIiwKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgZGlhbG9nVmlzaWJsZTogZmFsc2UKICAgIH07CiAgfSwKICBtZXRob2RzOiB7CiAgICAvLyDmuLLmn5PkvKDmkq3moJEKICAgIG15UHJvcGFnYXRlX3RyZWUoKSB7CiAgICAgIGxldCBteUNoYXJ0ID0gdGhpcy4kZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJwcm9wYWdhdGVfdHJlZV9ncmFwaCIpKTsKICAgICAgbGV0IG9wdGlvbjsKICAgICAgbGV0IHF1ZXJ5ID0gdGhpcy4kcm91dGUucXVlcnk7CiAgICAgIG15Q2hhcnQuc2hvd0xvYWRpbmcoKTsKICAgICAgdGhpcy4kYXhpb3MuZ2V0KGAvY29tbWVudC9sb2NhdGlvbj90YWdfdGFza19pZD0ke3F1ZXJ5LnRhZ190YXNrX2lkfSZ3ZWlib19pZD0ke3F1ZXJ5LndlaWJvX2lkfWApLnRoZW4ocmVzID0+IHsKICAgICAgICBteUNoYXJ0LmhpZGVMb2FkaW5nKCk7CiAgICAgICAgY29uc3QgbG9jYXRpb25EYXRhID0gcmVzLmRhdGEuZGF0YTsgLy8g5YGH6K6+6L+U5Zue5pWw5o2u55qE57uT5p6E5Li6IHsgbG9jYXRpb246IFt7bmFtZTogJ+WcsOeCuTEnLCB2YWx1ZTogMTB9LCAuLi5dIH0KCiAgICAgICAgY29uc3QgZ2VvRGF0YSA9IGxvY2F0aW9uRGF0YS5tYXAoaXRlbSA9PiAoewogICAgICAgICAgbmFtZTogaXRlbS5sb2NhdGlvbiwKICAgICAgICAgIC8vIOS9jee9ruWQjeensAogICAgICAgICAgdmFsdWU6IGl0ZW0uY291bnQgLy8g6K+l5L2N572u55qE6K+E6K665pWw6YePCiAgICAgICAgfSkpOwogICAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKHsKICAgICAgICAgIHRvb2x0aXA6IHsKICAgICAgICAgICAgdHJpZ2dlcjogIml0ZW0iCiAgICAgICAgICB9LAogICAgICAgICAgZ2VvOiB7CiAgICAgICAgICAgIG1hcDogImNoaW5hIiwKICAgICAgICAgICAgLy8g5L2/55So5Lit5Zu95Zyw5Zu+CiAgICAgICAgICAgIGxhYmVsOiB7CiAgICAgICAgICAgICAgZW1waGFzaXM6IHsKICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgICAgfQogICAgICAgICAgICB9LAogICAgICAgICAgICByb2FtOiB0cnVlIC8vIOWPr+S7peW5s+enu+WSjOe8qeaUvuWcsOWbvgogICAgICAgICAgfSwKICAgICAgICAgIHNlcmllczogW3sKICAgICAgICAgICAgbmFtZTogIuWcsOeQhuS9jee9ruWIhuW4gyIsCiAgICAgICAgICAgIHR5cGU6ICJzY2F0dGVyIiwKICAgICAgICAgICAgY29vcmRpbmF0ZVN5c3RlbTogImdlbyIsCiAgICAgICAgICAgIGRhdGE6IGdlb0RhdGEsCiAgICAgICAgICAgIHN5bWJvbFNpemU6IGZ1bmN0aW9uICh2YWwpIHsKICAgICAgICAgICAgICByZXR1cm4gdmFsWzJdIC8gMjsgLy8g5qC55o2u6K+E6K665pWw6YeP6LCD5pW05qCH6K6w55qE5aSn5bCPCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGVuY29kZTogewogICAgICAgICAgICAgIHZhbHVlOiAyCiAgICAgICAgICAgIH0sCiAgICAgICAgICAgIGl0ZW1TdHlsZTogewogICAgICAgICAgICAgIGNvbG9yOiAiI0ZGNjM0NyIgLy8g6K6+5a6a54K555qE6aKc6ImyCiAgICAgICAgICAgIH0KICAgICAgICAgIH1dCiAgICAgICAgfSk7CiAgICAgIH0pOwogICAgfSwKICAgIC8vIOaYvuekuuWcsOWbvgogICAgc2hvdygpIHsKICAgICAgdGhpcy5kaWFsb2dWaXNpYmxlID0gdHJ1ZTsKICAgICAgdGhpcy4kbmV4dFRpY2soKCkgPT4gewogICAgICAgIGxldCBteUNoYXJ0ID0gdGhpcy4kZWNoYXJ0cy5pbml0KGRvY3VtZW50LmdldEVsZW1lbnRCeUlkKCJtYXBDaGFydCIpKTsKICAgICAgICBsZXQgb3B0aW9uOwogICAgICAgIG15Q2hhcnQuc2hvd0xvYWRpbmcoKTsKICAgICAgICBsZXQgcXVlcnkgPSB0aGlzLiRyb3V0ZS5xdWVyeTsKICAgICAgICB0aGlzLiRheGlvcy5nZXQoYC9jb21tZW50L2xvY2F0aW9uP3RhZ190YXNrX2lkPSR7cXVlcnkudGFnX3Rhc2tfaWR9JndlaWJvX2lkPSR7cXVlcnkud2VpYm9faWR9YCkudGhlbihyZXMgPT4gewogICAgICAgICAgbXlDaGFydC5oaWRlTG9hZGluZygpOwogICAgICAgICAgY29uc3QgbG9jYXRpb25EYXRhID0gcmVzLmRhdGEuZGF0YTsgLy8g5YGH6K6+6L+U5Zue5pWw5o2u55qE57uT5p6E5Li6IHsgbG9jYXRpb246IFt7bmFtZTogJ+WcsOeCuTEnLCB2YWx1ZTogMTB9LCAuLi5dIH0KCiAgICAgICAgICBjb25zdCBnZW9EYXRhID0gbG9jYXRpb25EYXRhLm1hcChpdGVtID0+ICh7CiAgICAgICAgICAgIG5hbWU6IGl0ZW0ubG9jYXRpb24sCiAgICAgICAgICAgIC8vIOS9jee9ruWQjeensAogICAgICAgICAgICB2YWx1ZTogaXRlbS5jb3VudCAvLyDor6XkvY3nva7nmoTor4TorrrmlbDph48KICAgICAgICAgIH0pKTsKICAgICAgICAgIG15Q2hhcnQuc2V0T3B0aW9uKHsKICAgICAgICAgICAgdG9vbHRpcDogewogICAgICAgICAgICAgIHRyaWdnZXI6ICJpdGVtIgogICAgICAgICAgICB9LAogICAgICAgICAgICBnZW86IHsKICAgICAgICAgICAgICBtYXA6ICJjaGluYSIsCiAgICAgICAgICAgICAgLy8g5L2/55So5Lit5Zu95Zyw5Zu+CiAgICAgICAgICAgICAgbGFiZWw6IHsKICAgICAgICAgICAgICAgIGVtcGhhc2lzOiB7CiAgICAgICAgICAgICAgICAgIHNob3c6IGZhbHNlCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICByb2FtOiB0cnVlIC8vIOWPr+S7peW5s+enu+WSjOe8qeaUvuWcsOWbvgogICAgICAgICAgICB9LAogICAgICAgICAgICBzZXJpZXM6IFt7CiAgICAgICAgICAgICAgbmFtZTogIuWcsOeQhuS9jee9ruWIhuW4gyIsCiAgICAgICAgICAgICAgdHlwZTogInNjYXR0ZXIiLAogICAgICAgICAgICAgIGNvb3JkaW5hdGVTeXN0ZW06ICJnZW8iLAogICAgICAgICAgICAgIGRhdGE6IGdlb0RhdGEsCiAgICAgICAgICAgICAgc3ltYm9sU2l6ZTogZnVuY3Rpb24gKHZhbCkgewogICAgICAgICAgICAgICAgcmV0dXJuIHZhbFsyXSAvIDI7IC8vIOagueaNruivhOiuuuaVsOmHj+iwg+aVtOagh+iusOeahOWkp+WwjwogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgZW5jb2RlOiB7CiAgICAgICAgICAgICAgICB2YWx1ZTogMgogICAgICAgICAgICAgIH0sCiAgICAgICAgICAgICAgaXRlbVN0eWxlOiB7CiAgICAgICAgICAgICAgICBjb2xvcjogIiNGRjYzNDciIC8vIOiuvuWumueCueeahOminOiJsgogICAgICAgICAgICAgIH0KICAgICAgICAgICAgfV0KICAgICAgICAgIH0pOwogICAgICAgIH0pOwogICAgICB9KTsKICAgIH0KICB9LAogIG1vdW50ZWQoKSB7CiAgICB0aGlzLm15UHJvcGFnYXRlX3RyZWUoKTsKICB9Cn07"},{"version":3,"names":["echarts","name","data","dialogVisible","methods","myPropagate_tree","myChart","$echarts","init","document","getElementById","option","query","$route","showLoading","$axios","get","tag_task_id","weibo_id","then","res","hideLoading","locationData","geoData","map","item","location","value","count","setOption","tooltip","trigger","geo","label","emphasis","show","roam","series","type","coordinateSystem","symbolSize","val","encode","itemStyle","color","$nextTick","mounted"],"sources":["src/components/blog_detail/propagate_tree.vue"],"sourcesContent":["<template>\r\n  <div class=\"propagate_tree\">\r\n    <div class=\"propagate_tree_title\">地理位置分布</div>\r\n    <el-button type=\"text\" @click=\"show\" class=\"maxTree\">点击打开地图</el-button>\r\n    <div id=\"propagate_tree_graph\"></div>\r\n    <el-dialog title=\"地理位置大图\" :visible.sync=\"dialogVisible\" fullscreen=\"true\">\r\n      <div id=\"mapChart\"></div>\r\n      <span slot=\"footer\" class=\"dialog-footer\">\r\n        <el-button type=\"primary\" @click=\"dialogVisible = false\">确 定</el-button>\r\n      </span>\r\n    </el-dialog>\r\n  </div>\r\n</template>\r\n\r\n\r\n<script>\r\nimport echarts from 'echarts';\r\nimport 'echarts/map/js/china'; // 导入中国地图\r\n\r\nexport default {\r\n  name: \"propagate_tree\",\r\n  data() {\r\n    return {\r\n      dialogVisible: false,\r\n    };\r\n  },\r\n  methods: {\r\n    // 渲染传播树\r\n    myPropagate_tree() {\r\n      let myChart = this.$echarts.init(document.getElementById(\"propagate_tree_graph\"));\r\n      let option;\r\n      let query = this.$route.query;\r\n\r\n      myChart.showLoading();\r\n      this.$axios.get(`/comment/location?tag_task_id=${query.tag_task_id}&weibo_id=${query.weibo_id}`).then((res) => {\r\n        myChart.hideLoading();\r\n\r\n        const locationData = res.data.data;  // 假设返回数据的结构为 { location: [{name: '地点1', value: 10}, ...] }\r\n\r\n        const geoData = locationData.map(item => ({\r\n          name: item.location,  // 位置名称\r\n          value: item.count,    // 该位置的评论数量\r\n        }));\r\n\r\n        myChart.setOption({\r\n          tooltip: {\r\n            trigger: \"item\",\r\n          },\r\n          geo: {\r\n            map: \"china\",  // 使用中国地图\r\n            label: {\r\n              emphasis: {\r\n                show: false,\r\n              },\r\n            },\r\n            roam: true,  // 可以平移和缩放地图\r\n          },\r\n          series: [\r\n            {\r\n              name: \"地理位置分布\",\r\n              type: \"scatter\",\r\n              coordinateSystem: \"geo\",\r\n              data: geoData,\r\n              symbolSize: function (val) {\r\n                return val[2] / 2;  // 根据评论数量调整标记的大小\r\n              },\r\n              encode: {\r\n                value: 2,\r\n              },\r\n              itemStyle: {\r\n                color: \"#FF6347\",  // 设定点的颜色\r\n              },\r\n            },\r\n          ],\r\n        });\r\n      });\r\n    },\r\n\r\n    // 显示地图\r\n    show() {\r\n      this.dialogVisible = true;\r\n      this.$nextTick(() => {\r\n        let myChart = this.$echarts.init(document.getElementById(\"mapChart\"));\r\n        let option;\r\n\r\n        myChart.showLoading();\r\n        let query = this.$route.query;\r\n        this.$axios.get(`/comment/location?tag_task_id=${query.tag_task_id}&weibo_id=${query.weibo_id}`).then((res) => {\r\n          myChart.hideLoading();\r\n\r\n          const locationData = res.data.data;  // 假设返回数据的结构为 { location: [{name: '地点1', value: 10}, ...] }\r\n\r\n          const geoData = locationData.map(item => ({\r\n            name: item.location,  // 位置名称\r\n            value: item.count,    // 该位置的评论数量\r\n          }));\r\n\r\n          myChart.setOption({\r\n            tooltip: {\r\n              trigger: \"item\",\r\n            },\r\n            geo: {\r\n              map: \"china\",  // 使用中国地图\r\n              label: {\r\n                emphasis: {\r\n                  show: false,\r\n                },\r\n              },\r\n              roam: true,  // 可以平移和缩放地图\r\n            },\r\n            series: [\r\n              {\r\n                name: \"地理位置分布\",\r\n                type: \"scatter\",\r\n                coordinateSystem: \"geo\",\r\n                data: geoData,\r\n                symbolSize: function (val) {\r\n                  return val[2] / 2;  // 根据评论数量调整标记的大小\r\n                },\r\n                encode: {\r\n                  value: 2,\r\n                },\r\n                itemStyle: {\r\n                  color: \"#FF6347\",  // 设定点的颜色\r\n                },\r\n              },\r\n            ],\r\n          });\r\n        });\r\n      });\r\n    },\r\n  },\r\n\r\n  mounted() {\r\n    this.myPropagate_tree();\r\n  },\r\n};\r\n</script>\r\n\r\n\r\n<style scoped>\r\n.propagate_tree {\r\n  position: absolute;\r\n  top: 1%;\r\n  width: 100%;\r\n  height: 99%;\r\n  background-color: #fff;\r\n}\r\n.propagate_tree_title {\r\n  margin-left: 20px;\r\n  padding: 5px;\r\n  font-weight: 600;\r\n  letter-spacing: 1px;\r\n}\r\n#propagate_tree_graph {\r\n  width: 550px;\r\n  height: 750px;\r\n  top: 30px;\r\n  margin-left: 10%;\r\n}\r\n.maxTree {\r\n  position: absolute;\r\n  right: 10px;\r\n  top: 10px;\r\n  z-index: 99;\r\n}\r\n#mapChart {\r\n  width: 100%;\r\n  height: 100%;\r\n}\r\n</style>\r\n"],"mappings":";AAgBA,OAAAA,OAAA;AACA;;AAEA;EACAC,IAAA;EACAC,KAAA;IACA;MACAC,aAAA;IACA;EACA;EACAC,OAAA;IACA;IACAC,iBAAA;MACA,IAAAC,OAAA,QAAAC,QAAA,CAAAC,IAAA,CAAAC,QAAA,CAAAC,cAAA;MACA,IAAAC,MAAA;MACA,IAAAC,KAAA,QAAAC,MAAA,CAAAD,KAAA;MAEAN,OAAA,CAAAQ,WAAA;MACA,KAAAC,MAAA,CAAAC,GAAA,kCAAAJ,KAAA,CAAAK,WAAA,aAAAL,KAAA,CAAAM,QAAA,IAAAC,IAAA,CAAAC,GAAA;QACAd,OAAA,CAAAe,WAAA;QAEA,MAAAC,YAAA,GAAAF,GAAA,CAAAlB,IAAA,CAAAA,IAAA;;QAEA,MAAAqB,OAAA,GAAAD,YAAA,CAAAE,GAAA,CAAAC,IAAA;UACAxB,IAAA,EAAAwB,IAAA,CAAAC,QAAA;UAAA;UACAC,KAAA,EAAAF,IAAA,CAAAG,KAAA;QACA;QAEAtB,OAAA,CAAAuB,SAAA;UACAC,OAAA;YACAC,OAAA;UACA;UACAC,GAAA;YACAR,GAAA;YAAA;YACAS,KAAA;cACAC,QAAA;gBACAC,IAAA;cACA;YACA;YACAC,IAAA;UACA;UACAC,MAAA,GACA;YACApC,IAAA;YACAqC,IAAA;YACAC,gBAAA;YACArC,IAAA,EAAAqB,OAAA;YACAiB,UAAA,WAAAA,CAAAC,GAAA;cACA,OAAAA,GAAA;YACA;YACAC,MAAA;cACAf,KAAA;YACA;YACAgB,SAAA;cACAC,KAAA;YACA;UACA;QAEA;MACA;IACA;IAEA;IACAT,KAAA;MACA,KAAAhC,aAAA;MACA,KAAA0C,SAAA;QACA,IAAAvC,OAAA,QAAAC,QAAA,CAAAC,IAAA,CAAAC,QAAA,CAAAC,cAAA;QACA,IAAAC,MAAA;QAEAL,OAAA,CAAAQ,WAAA;QACA,IAAAF,KAAA,QAAAC,MAAA,CAAAD,KAAA;QACA,KAAAG,MAAA,CAAAC,GAAA,kCAAAJ,KAAA,CAAAK,WAAA,aAAAL,KAAA,CAAAM,QAAA,IAAAC,IAAA,CAAAC,GAAA;UACAd,OAAA,CAAAe,WAAA;UAEA,MAAAC,YAAA,GAAAF,GAAA,CAAAlB,IAAA,CAAAA,IAAA;;UAEA,MAAAqB,OAAA,GAAAD,YAAA,CAAAE,GAAA,CAAAC,IAAA;YACAxB,IAAA,EAAAwB,IAAA,CAAAC,QAAA;YAAA;YACAC,KAAA,EAAAF,IAAA,CAAAG,KAAA;UACA;UAEAtB,OAAA,CAAAuB,SAAA;YACAC,OAAA;cACAC,OAAA;YACA;YACAC,GAAA;cACAR,GAAA;cAAA;cACAS,KAAA;gBACAC,QAAA;kBACAC,IAAA;gBACA;cACA;cACAC,IAAA;YACA;YACAC,MAAA,GACA;cACApC,IAAA;cACAqC,IAAA;cACAC,gBAAA;cACArC,IAAA,EAAAqB,OAAA;cACAiB,UAAA,WAAAA,CAAAC,GAAA;gBACA,OAAAA,GAAA;cACA;cACAC,MAAA;gBACAf,KAAA;cACA;cACAgB,SAAA;gBACAC,KAAA;cACA;YACA;UAEA;QACA;MACA;IACA;EACA;EAEAE,QAAA;IACA,KAAAzC,gBAAA;EACA;AACA","ignoreList":[]}]}